<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>兰朵儿</title>
    <url>/2018/09/06/2018-09-06-%E5%85%B0%E6%9C%B5%E5%84%BF%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>正式开发的第一个手机软件：<a href="https://www.coolapk.com/apk/199071">下载地址</a></p>

</blockquote>

<h2 id="大事记"><a href="#大事记" class="headerlink" title="大事记"></a>大事记</h2><ul>
<li><p>接入广告</p>
<p> 2020年7月中旬，兰朵儿接入启动页第三方广告（仅首页启动页广告），以维持兰朵儿的健康发展</p>
</li>
<li><p>资金支持</p>
<p> 物理院创新创业相关老师，为兰朵儿服务器等支持资金3万元</p>
</li>
<li><p>再次独立</p>
<p> 2021年4月，因为一些原因，兰朵儿选择独立</p>
</li>
<li><p>资金支持</p>
<p> 2019年11月，物理院科创负责老师，支持资金1.5万元，兰朵儿终于拥有了服务器，开始部署服务器端程序</p>
</li>
<li><p>更名i兰大易班</p>
<p> 2019年3月，与学校合作，更名i兰大易班，合作期暂定一年</p>
</li>
<li><p>更名兰朵儿</p>
<p> 2018年5月，恢复单身，代码重构，包名修改，软件更名：兰朵儿</p>
</li>
<li><p>发布小小一棵树</p>
<p> 2018年2月，刚脱单，看课表不方便，想做一个情侣课表，4月正式发布</p>
</li>
</ul>
<hr>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="兰朵儿"><a href="#兰朵儿" class="headerlink" title="兰朵儿"></a>兰朵儿</h3><h4 id="V-7-0-2-230"><a href="#V-7-0-2-230" class="headerlink" title="V 7.0.2.230"></a>V 7.0.2.230</h4><blockquote>
<p>2021.04.10</p>
</blockquote>
<ol>
<li>课表界面背景图沉浸</li>
<li>论坛二级评论可点赞</li>
<li>论坛评论可置顶、优质</li>
<li>兰朵儿账单等bugs修复</li>
</ol>
<h4 id="V-6-9-5-209"><a href="#V-6-9-5-209" class="headerlink" title="V 6.9.5.209"></a>V 6.9.5.209</h4><ol>
<li>一些第三方库更新</li>
<li>部分Java代码尝试转向Kotlin</li>
<li>修复bugs：桌面小部件不更新、兰朵儿码失败、部分机型部分主题导致兰朵儿文字消失等</li>
</ol>
<h4 id="V-6-9-1"><a href="#V-6-9-1" class="headerlink" title="V 6.9.1"></a>V 6.9.1</h4><ol>
<li>全面适配安卓11</li>
<li>修复bugs</li>
</ol>
<h3 id="i兰大易班"><a href="#i兰大易班" class="headerlink" title="i兰大易班"></a>i兰大易班</h3><h4 id="V-5-12-3"><a href="#V-5-12-3" class="headerlink" title="V 5.12.3"></a>V 5.12.3</h4><blockquote>
<p>2019.12.3</p>
</blockquote>
<ol>
<li>大bugs，学校信息门户再次改版，紧急适配</li>
<li>新增绩点变化曲线</li>
<li>新增二维码自定义生成（练手项目）</li>
<li>新增电费变化曲线，暂时保存在本地，卸载以后消失</li>
<li>删除旧数据库，软件体积减小；5.11.6之前直接更新到本版本，课表需要重新导入，不再兼容以前的数据；不再兼容以前的兰朵儿模式数据，后期全部云端备份（服务器搭建中）</li>
</ol>
<h4 id="V-5-11-28"><a href="#V-5-11-28" class="headerlink" title="V 5.11.28"></a>V 5.11.28</h4><blockquote>
<p>2019.11.28</p>
</blockquote>
<ol>
<li>bug，修复多次重新进入软件；偶尔闪退</li>
<li>优化，修复通知栏提醒课程等错误</li>
</ol>
<h4 id="V-5-11-26"><a href="#V-5-11-26" class="headerlink" title="V 5.11.26"></a>V 5.11.26</h4><blockquote>
<p>2019.11.26</p>
</blockquote>
<ol>
<li>优化，进一步优化适配</li>
</ol>
<h4 id="V-5-11-25"><a href="#V-5-11-25" class="headerlink" title="V 5.11.25"></a>V 5.11.25</h4><blockquote>
<p>2019.11.25</p>
</blockquote>
<ol>
<li>紧急修复，学校的官网改版，兰朵儿紧急修复</li>
</ol>
<h4 id="V-5-11-22"><a href="#V-5-11-22" class="headerlink" title="V 5.11.22"></a>V 5.11.22</h4><blockquote>
<p>2019.11.22</p>
</blockquote>
<ol>
<li>接入服务器，感谢物理科学与技术学院赞助服务器费用，接下来将会逐渐重构代码，为同学们提供更为便捷的服务</li>
<li>修复bug，修复偶尔电费充值无法进行等问题</li>
</ol>
<h4 id="V-5-11-06"><a href="#V-5-11-06" class="headerlink" title="V 5.11.06"></a>V 5.11.06</h4><blockquote>
<p>2019.11.06</p>
</blockquote>
<ol>
<li>自定义主题颜色</li>
<li>空闲教室新增闻韶娄</li>
<li>其他，修复部分闪退问题；</li>
</ol>
<h4 id="V-5-11-04"><a href="#V-5-11-04" class="headerlink" title="V 5.11.04"></a>V 5.11.04</h4><blockquote>
<p>2019.11.04</p>
</blockquote>
<ol>
<li>研究生登录，可以使用空闲教室，首页不再有易班动态，优化其他功能</li>
<li>护眼绿，本次更新换个颜色换个心情，下次恢复蓝色</li>
<li>首页今日课程，修复课程节数显示错误，更新校车等信息</li>
<li>首页信息，校园余额、电费、邮件随着充值阅读等实时变化，无需再次进入软件</li>
<li>其他，修复部分闪退问题；对学校官网出问题做一定提示处理；数据结构优化，为后期兰朵儿社区作准备</li>
</ol>
<h4 id="V-5-10-14"><a href="#V-5-10-14" class="headerlink" title="V 5.10.14"></a>V 5.10.14</h4><blockquote>
<p>2019.10.14</p>
</blockquote>
<ol>
<li>首页，界面重构,好看一点; 首页失物招领等滚动播放,点击直达详情界面</li>
<li>兰朵儿模式，新增点赞功能</li>
<li>课表，优化添加课程，自己添加过的课重新导入不会被删除</li>
<li>桌面小部件，倒计时优化，每周小部件，课表设置中可修改背景半透明</li>
<li>其他，修复闪退问题</li>
</ol>
<h4 id="V-5-9-23"><a href="#V-5-9-23" class="headerlink" title="V 5.9.23"></a>V 5.9.23</h4><blockquote>
<p>2019.9.23</p>
</blockquote>
<ol>
<li>新增个人教学计划，包含两种视图模式</li>
<li>适配兰州大学研究生，可以使用课表、成绩绩点等功能</li>
<li>绩点计算，筛选功能更强大</li>
<li>课表，代码重构，启动速度加快</li>
<li>修复，修复闪退等问题，优化其他细节问题</li>
</ol>
<h4 id="V-5-9-8"><a href="#V-5-9-8" class="headerlink" title="V 5.9.8"></a>V 5.9.8</h4><blockquote>
<p>2019.9.8</p>
</blockquote>
<ol>
<li>课表，新增兰朵儿码，情侣课表导入不再需要账号密码，课表设置移至课表界面，添加时间分割线（设置中可关闭），解决情侣课表下方大片空白、周数选择混乱等问题</li>
<li>设置，设置界面重构，课表设置移至课表界面，简化设置</li>
<li>其他，迎新结束，关闭迎新界面、吐槽界面（智障客服代替）；首页细节优化：如小广播、通知、易班等，新增关于我们界面，其他细节优化</li>
<li>兰朵模式、早起打卡，新增每日心情</li>
<li>空闲教室，新增贺兰堂</li>
<li>修复，修复闪退等问题</li>
</ol>
<h4 id="V-5-8-28"><a href="#V-5-8-28" class="headerlink" title="V 5.8.28"></a>V 5.8.28</h4><blockquote>
<p>2019.8.28</p>
</blockquote>
<ol>
<li>新增，首页实时校车信息（设置中可隐藏），教学评价，常用电话，信息查询，发票税号</li>
<li>信息查询，新生可以查询自己的邮箱、学号，以及其密码，可以用来登录该软件，但是还不能导入课表，教务系统不能使用（课表，成绩，空闲教室三个不可用）</li>
<li>优化，引导新生激活校园卡网页版，桌面小部件等</li>
</ol>
<h4 id="V-5-8-17"><a href="#V-5-8-17" class="headerlink" title="V 5.8.17"></a>V 5.8.17</h4><blockquote>
<p>2019.8.17</p>
</blockquote>
<ol>
<li>新增课表输出（新生可用），新生可查看课表</li>
<li>新增自动检查更新开关</li>
<li>优化登录逻辑，本次更新需要重新登录，登录可选删除数据，判断账号等</li>
<li>优化新生使用</li>
<li>其他优化，如，校历，校车发车时刻，迎新系统，课表，校园卡充值</li>
</ol>
<h4 id="V-5-8-2"><a href="#V-5-8-2" class="headerlink" title="V 5.8.2"></a>V 5.8.2</h4><blockquote>
<p>2019.8.2</p>
</blockquote>
<ol>
<li>优化课表逻辑，简化导入，更改为点击导入，优化情侣课表</li>
<li>优化登录界面，简化登录，只支持信息门户登录</li>
</ol>
<h4 id="V-5-7-25"><a href="#V-5-7-25" class="headerlink" title="V 5.7.25"></a>V 5.7.25</h4><blockquote>
<p>2019.7.25</p>
</blockquote>
<ol>
<li>优化新生相关功能，简化登录，新生登录以后直接</li>
<li>增加功能搜索</li>
</ol>
<h4 id="V-5-7-16"><a href="#V-5-7-16" class="headerlink" title="V 5.7.16"></a>V 5.7.16</h4><blockquote>
<p>2019.7.16</p>
</blockquote>
<ol>
<li>下学期课表，课表界面下滑，重新导入即可看到</li>
<li>智慧学工网页，部分信息无法加载已经解决</li>
<li>安全微课，新生安全微课模块</li>
<li>bug与优化，修改本地成绩时闪退；桌面小部件课程显示错误修复；成绩查询时提示有无新增成绩，</li>
</ol>
<h4 id="V-5-7-6"><a href="#V-5-7-6" class="headerlink" title="V 5.7.6"></a>V 5.7.6</h4><blockquote>
<p>2019.7.6</p>
</blockquote>
<ol>
<li>外网问题，解决，课表、成绩等外网访问时，需要输入验证码的问题</li>
<li>迎新界面，可以关闭，在“个性设置 - 界面自定义 - 显示迎新”</li>
<li>专业课本查询，学校官方数据，仅供参考，部分老师选择课本不同</li>
<li>假期登记、到家登记，一键直达</li>
<li>新邮件自动提醒，有可能被系统杀死后台，导致无法提醒，建议打开软件在首页查看</li>
<li>课表，可以左右滑动切换下一周，更方便</li>
<li>bugs与优化，优化部分(如成绩等)细节与Bugs</li>
</ol>
<h4 id="V-5-6-19"><a href="#V-5-6-19" class="headerlink" title="V 5.6.19"></a>V 5.6.19</h4><blockquote>
<p>2019.6.19</p>
</blockquote>
<ol>
<li>支付安全，电费充值，校园卡支付宝、微信等充值检测，若充值失败，联系客服，核对日志以后，如果是软件问题，全额赔偿</li>
<li>考试安排，首页显示，首页其他逻辑细节优化</li>
<li>登录等逻辑优化，借阅信息等细节优化，bug修复</li>
</ol>
<h4 id="V-5-6-10"><a href="#V-5-6-10" class="headerlink" title="V 5.6.10"></a>V 5.6.10</h4><blockquote>
<p>2019.6.10</p>
</blockquote>
<ol>
<li>校园卡账单，花费分布统计、每日统计</li>
<li>电费充值记录查询</li>
<li>兰朵儿模式，<ul>
<li>小米功能失效说明，需要后台弹出界面权限，引导打开；</li>
<li>界面重写，</li>
<li>统计增加三周对比；</li>
<li>白名单重写，可搜索，有图标</li>
</ul>
</li>
<li>馆藏查询，可查看细节，以及榆中馆藏大致位置</li>
<li>宿舍签到，单独出来，一键直达</li>
<li>课表分享，部分机型不兼容，后期优化</li>
<li>数据备份，支持本地备份与分享</li>
<li>成绩导入，逻辑重写，导入速度增加300%，准确度（寒假暑假等）增强</li>
<li>其他，一些bug修复、登录上等一些问题细节优化，小问号功能介绍等</li>
</ol>
<h4 id="V-5-5-27"><a href="#V-5-5-27" class="headerlink" title="V 5.5.27"></a>V 5.5.27</h4><blockquote>
<p>2019.5.27</p>
</blockquote>
<ol>
<li>宿舍电费，首页右上角点击进入，可进行电费充值，到账有延迟</li>
<li>成绩查询，更名绩点计算，支持兰大5.0、国际4.0两种方式绩点计算</li>
<li>兰朵儿模式，优化拦截逻辑，只在尝试进入非系统软件时进行拦截，绘制每日学习时间，展示所有学习记录（本地保存），排行榜显示自己的排名并高亮</li>
<li>早起打卡，绘制每日打卡时间，首页最上方点击进入</li>
<li>首页图标，优化</li>
<li>账号登录，逻辑优化</li>
<li>首页通知，显示最近20条兰朵儿传情、失物招领</li>
<li>部分Bugs，修复</li>
<li>其他细节，优化</li>
</ol>
<h4 id="V-5-5-12"><a href="#V-5-5-12" class="headerlink" title="V 5.5.12"></a>V 5.5.12</h4><blockquote>
<p>2019.5.12</p>
</blockquote>
<ol>
<li>兰朵儿小通知，显示被置顶的失物招领、兰朵传情，可在个性设置-界面自定义，更改每天出现次数</li>
<li>校园卡充值，优化支付宝充值（可花呗支付），新增信息确认更安全，新增学校信息门户网站爆炸时，直接智慧一卡通登录</li>
<li>登录重写，目前又“智慧学工、信息门户、教务系统、智慧一卡通”4种方式可选，无论通过哪种登录方式，只要登录成功，下次再进入软件，都不会再弹出来登录界面</li>
<li>通知栏提醒，下一节课、明日课程、校园卡余额、电费剩余、借阅信息符合条件时每天只提醒一次</li>
<li>更新提醒，不再突然弹出（下次更新生效），只在通知栏出现一条消息，点击可进入，也可在“我的”界面手动检查更新</li>
<li>首页内容，全部可隐藏（包括易班动态），通知公告可订阅、增加权重（团委、学工、教务、新闻），增加院级易班动态</li>
<li>首页下滑，可进入兰朵模式</li>
<li>邮箱，可查看已发邮件，新增网页登陆，可发邮件</li>
<li>其他，部分闪退问题，优化细节</li>
</ol>
<h4 id="V-5-5-1"><a href="#V-5-5-1" class="headerlink" title="V 5.5.1"></a>V 5.5.1</h4><blockquote>
<p>2019.5.1</p>
</blockquote>
<ol>
<li>首页内容，全部可隐藏（包括易班动态），通知公告整合</li>
<li>早起打卡，点首页i兰大易班进入，正式部署到服务器以后，早起打卡、兰朵模式所有数据将会被清空</li>
<li>修复，请销假、问题吐槽无法选择文件，兰朵模式下，部分机型闹钟无法关闭等bug</li>
</ol>
<h4 id="V-5-4-28"><a href="#V-5-4-28" class="headerlink" title="V 5.4.28"></a>V 5.4.28</h4><blockquote>
<p>2019.4.28</p>
</blockquote>
<p>修复</p>
<ol>
<li>紧急更新，请销假、问题吐槽无法选择文件等bug</li>
</ol>
<h4 id="V-5-4-26"><a href="#V-5-4-26" class="headerlink" title="V 5.4.26"></a>V 5.4.26</h4><blockquote>
<p>2019.4.26</p>
</blockquote>
<p>新增：</p>
<ol>
<li>校园卡充值，支持支付宝花呗、银行卡支付</li>
<li>玩转AI，快速计算图片中人数</li>
<li>团委公告、新闻公告，设置中可以隐藏</li>
</ol>
<p>优化</p>
<ol>
<li>兰朵模式，白名单记忆与跳转、20s内返回恢复、备份数据优化等</li>
<li>其他细节，图标等</li>
</ol>
<p>修复</p>
<ol>
<li>请销假偶尔失效，已修复</li>
</ol>
<h4 id="V-5-4-14"><a href="#V-5-4-14" class="headerlink" title="V 5.4.14"></a>V 5.4.14</h4><blockquote>
<p>2019.4.14</p>
</blockquote>
<p>新增：</p>
<ol>
<li>校园卡充值，与微信端相同</li>
<li>兰朵儿模式，在学习时打开该模式，特定时间内，将不能玩手机（如有部分机型能退出，请联系我）</li>
<li>数据提醒，请给予自启权限，默认校园卡余额小于20元、宿舍电费小于10度，距离下一节课1小时，距离还书3天，通知栏以及进入软件弹框提醒</li>
<li>成绩加权平均分，权重为学分，学分或成绩导入错误，可长按修改</li>
</ol>
<p>优化</p>
<ol>
<li>登录问题，登录逻辑、界面重写，遇到智慧学工无法登录时，弹出验证码界面</li>
<li>网页加载，首页学工通知等，极大加快加载速度</li>
<li>桌面小部件，更增加存活率，请给予自启权限</li>
<li>其他细节，如转场动画</li>
</ol>
<p>修复</p>
<ol>
<li>部分闪退，部分问题</li>
</ol>
<h4 id="V-5-3-27"><a href="#V-5-3-27" class="headerlink" title="V 5.3.27"></a>V 5.3.27</h4><blockquote>
<p>2019.3.27</p>
</blockquote>
<p>优化</p>
<ol>
<li>请销假，已经正常可用；优化加载提示；不登录返回时不再闪退</li>
<li>去除主界面下滑登陆，“我的”-“个性设置”-“个人中心”-“主用户”，统一登陆</li>
<li>兰朵儿传情等刷新优化</li>
<li>桌面小部件，重叠课程加三角</li>
</ol>
<h4 id="V-5-3-26"><a href="#V-5-3-26" class="headerlink" title="V 5.3.26"></a>V 5.3.26</h4><blockquote>
<p>2019.3.26</p>
</blockquote>
<p>新增：</p>
<ol>
<li>请销假申请、智慧学工，！！！<strong>测试中</strong>，不久即可使用！！！用邮箱登录的同学，自动登录，无需填写任何信息。</li>
<li>兰朵儿传情，表白墙</li>
<li>失物招领，与校学生会权益部君合作</li>
<li>数据备份、找回密码，邮箱、密码、学号、相遇时间加密后，可上传至服务器，密钥为手机唯一识别码的一部分，与手机绑定</li>
</ol>
<p>优化</p>
<ol>
<li>主界面，易班动态等消息数据缓存，防止加载失败出现空白，今日课程重写</li>
<li>空闲教室，记忆上次搜索的教学楼，自动请求</li>
<li>图片选择、裁剪，重写</li>
<li>其他细节，修改</li>
</ol>
<p>修复</p>
<ol>
<li>部分闪退，如成绩或借阅信息导入过程中退出该界面</li>
</ol>
<h4 id="V-5-3-11"><a href="#V-5-3-11" class="headerlink" title="V 5.3.11"></a>V 5.3.11</h4><blockquote>
<p>2019.3.11</p>
</blockquote>
<p>新增：</p>
<ol>
<li>桌面倒计时，目前只能添加一个</li>
<li>下课时间，设置中可关闭</li>
<li>校内通知，教务系统、学工网通知</li>
</ol>
<p> 优化</p>
<ol>
<li>去除进入动画，防止掉帧</li>
<li>空闲教室，自动加载天山堂今日课程，可搜索</li>
<li>图片选择、裁剪，重写</li>
<li>其他细节，修改</li>
</ol>
<p>修复</p>
<ol>
<li>邮件附件，名字相同打开错误已修复</li>
<li>部分闪退</li>
</ol>
<h4 id="V-5-3-4"><a href="#V-5-3-4" class="headerlink" title="V 5.3.4"></a>V 5.3.4</h4><blockquote>
<p>2019.3.4</p>
</blockquote>
<p>（说明，本学年周日视为每周第一天，即课表界面第二周周日，会显示当前第三周）</p>
<p>新增</p>
<ol>
<li>绩点计算，非常强大，成绩查询界面点击问号，查看详情，可修改本地成绩</li>
<li>闪退拦截，添加bug小虫子</li>
<li>性能管理，“我的”-“个性设置”-“软件优化”，可清除缓存或者邮件附件</li>
</ol>
<p>优化</p>
<ol>
<li>课表，支持自定义开学日期。支持自定义每周第一天，默认周日</li>
<li>问题吐槽，相机可使用</li>
<li>桌面小部件，增加广播接收，采用最新job机制，提高存活率，(软件后台被清理，桌面小部件容易卡死,以后会继续优化）</li>
</ol>
<p>修复</p>
<ol>
<li>课表，由于兼容中午一二节课程，以及情侣课表带来的时间错误</li>
<li>校内时刻、校历卡住，修复因网络问题卡住</li>
<li>部分闪退</li>
</ol>
<h4 id="V-5-3-1"><a href="#V-5-3-1" class="headerlink" title="V 5.3.1"></a>V 5.3.1</h4><blockquote>
<p>2019.3.1</p>
</blockquote>
<p>修复</p>
<ol>
<li>闪退，一些课表错误问题，本次更新自动清空课表数据</li>
<li>附件下载，微社区附件下载</li>
</ol>
<p>优化课表等<br>2.  课表，时间显示错位，桌面小部件更新等问题<br>3.  教务系统登录，设置中，“个人中心”，可选<br>4.  吐槽，加入版本号显示，后台加入机型显示</p>
<h4 id="V-5-2-27-2"><a href="#V-5-2-27-2" class="headerlink" title="V 5.2.27.2"></a>V 5.2.27.2</h4><blockquote>
<p>2019.2.27</p>
</blockquote>
<p>新增：</p>
<ol>
<li>情侣课表对比，直接查看两个人课表分布，设置中可以关闭</li>
<li>校内时刻，支持离线查看，校车发车时间，场馆开放时间，食堂开餐时间，浴室开放时间，学而超市营业时间，IC卡售电</li>
<li>邮件附件，可查看</li>
<li>校历，每年兰大放假等时刻表</li>
<li>问题吐槽，欢迎反馈交流</li>
<li>易班优课，拥有最新的网络课程资源</li>
<li>兰大微社区，校园通知先知道</li>
</ol>
<p>修复：<br>2.  闪退，部分华为等手机换头像，裁剪闪退；部分手机启动闪退；借阅信息导入闪退<br>3.  课程导入，部分同学有中午课程，11，12节有课，已经支持导入<br>4.  成绩导入，部分同学未导入完，已经离开该界面，以后不再闪退</p>
<p>优化：<br>2.  课程，支持中午课程，此版本更新需重新导入，否则，看着有些不正常<br>3.  问题吐槽，支持昵称设置，唯一性标识<br>4.  去除，一些暂时无用功能<br>5.  易班动态，支持显示个数定制</p>
<blockquote class="blockquote-center">
<p>旧版（兰朵儿）</p>

</blockquote>

<h4 id="V-5-2-23"><a href="#V-5-2-23" class="headerlink" title="V 5.2.23"></a>V 5.2.23</h4><blockquote>
<p>2019.2.23</p>
</blockquote>
<p>新增：</p>
<ol>
<li>首页，频道选择</li>
<li>统计，后台自动统计Bugly，出现闪退问题，请重复该情况再次闪退，大多数问题一天左右自动修复</li>
</ol>
<p>修复Bug：<br>2.  ……，前前后后在测试群修复了好多……，忘了具体是什么了，感谢内测用户的不断闪退</p>
<p>优化：<br>2.  课程，桌面小部件支持一周、可以连续添加或修改一个课程多个时间段、选择周数等美化、可记忆上次选择周数<br>3.  邮箱，可以接收垃圾邮件；排版更优化，附件即将可以<br>4.  选择弹框，统一优化、圆角等</p>
<h4 id="V-5-1-23"><a href="#V-5-1-23" class="headerlink" title="V 5.1.23"></a>V 5.1.23</h4><blockquote>
<p>2019.1.23</p>
</blockquote>
<p>重构：</p>
<ol>
<li>数据库，采用第三方GreenDao，应用于课表、成绩，课表添加、修改课程更优化，成绩查询兼容性更改好，ABCD等级可识别</li>
<li>官方库，迁移至Android X</li>
<li>体积，采用EventBus，减少重复代码</li>
<li>界面，课表采用Fragment重写，界面等逻辑重建；由于全面屏与侧滑栏容易冲突，去掉；首页重写</li>
<li>其他，减少无用功能，如各种判断、启动页，以及英语每日一句，优化启动速度</li>
</ol>
<h4 id="V-4-13-2"><a href="#V-4-13-2" class="headerlink" title="V 4.13.2"></a>V 4.13.2</h4><blockquote>
<p>2019.1.2</p>
</blockquote>
<p>紧急修复Bug：</p>
<ol>
<li>考试安排，已修复，可查看</li>
</ol>
<p>优化：<br>2.  启动页，弹框动画，目前华为手机启动页有问题，假期再改<br>3.  去除启动界面选择，桌面小部件，点击“今日课程”，可进入课程表界面，点击其余蓝色部分，可进入软件<br>4.  桌面小部件，圆角<br>5.  </p>
<h4 id="V-4-12-9"><a href="#V-4-12-9" class="headerlink" title="V 4.12.9"></a>V 4.12.9</h4><blockquote>
<p>2018.12.9</p>
</blockquote>
<p>优化：</p>
<ol>
<li>适配Android P，解决Android P不能登录的问题</li>
<li>成绩查询，导入代码重写，加快速，筛选菜单重写，更加简化</li>
<li>其他，部分图标，以及细节问题</li>
</ol>
<h4 id="V-4-12-3"><a href="#V-4-12-3" class="headerlink" title="V 4.12.3"></a>V 4.12.3</h4><blockquote>
<p>2018.12.3</p>
</blockquote>
<p>优化：</p>
<ol>
<li>学期课表，增加载入动画</li>
<li>空闲教室，新增杏林楼、观云楼，筛选方式简化</li>
<li>其他，部分图标，以及细节问题</li>
</ol>
<h4 id="V-4-11-21"><a href="#V-4-11-21" class="headerlink" title="V 4.11.21"></a>V 4.11.21</h4><blockquote>
<p>2018.11.21</p>
</blockquote>
<p>优化：</p>
<ol>
<li>学期课表，可以左滑，右滑切换周数，长按恢复当前周</li>
<li>引导页，目前只用于课表界面，首次进入会显示</li>
<li>各种动画，成绩，空闲教室，图书等列表数据加载，动画载入，首页切换动画</li>
<li>空闲教室，查询过程提示语，防止网络堵塞一直等待</li>
</ol>
<h4 id="V-4-0"><a href="#V-4-0" class="headerlink" title="V 4.0"></a>V 4.0</h4><blockquote>
<p>2018.11.06</p>
</blockquote>
<p>新增：</p>
<ol>
<li>考试安排，可以显示考试地点、时间</li>
</ol>
<p>优化：<br>2.  学期课表，改用悬浮菜单，简化标题栏，点击“第x周”，可以选择周数<br>3.  成绩查询，包含相应字符，即可<br>4.  邮件查看，出现新邮件，只加载10条</p>
<p>修复Bug：<br>2.  导入课程，修复部分课程导入错误的Bugs</p>
<h4 id="V-3-93"><a href="#V-3-93" class="headerlink" title="V 3.93"></a>V 3.93</h4><blockquote>
<p>2018.10.23</p>
</blockquote>
<p>优化课表界面，同一时间重复课程，可左右切换：<br>侧栏部分功能换至，校园生活界面</p>
<h4 id="V-3-91"><a href="#V-3-91" class="headerlink" title="V 3.91"></a>V 3.91</h4><blockquote>
<p>2018.10.15</p>
</blockquote>
<p>要睡觉了，不想写日志……</p>
<p>优化好多界面：<br>修复一大堆Bug</p>
<h4 id="V-3-8"><a href="#V-3-8" class="headerlink" title="V 3.8"></a>V 3.8</h4><blockquote>
<p>2018.10.07</p>
</blockquote>
<p>优化：</p>
<ol>
<li>学期课表，“别有洞天-个性课表-课表界面”，可以设置字体大小、以及格子高度</li>
<li>登录界面重写，主界面、图书借阅界面，下滑登录，界面美化重写，密码可以选择隐藏、显示</li>
<li>首页分区重构，引入Viewpage+Fragment布局，方便以后拓展功能</li>
<li>兰大邮箱，加载过程显示加载数量，以及邮件总数，刷新游戏，改为蓝白色</li>
<li>首页，点击‘今日课程’，可以进去‘学期课程’界面</li>
<li>学工网，提高展开速度，可自主下滑刷新,字体、加粗等</li>
<li>相伴时间，采用中科院授时中心，提供的网络时间</li>
<li>支付宝口令，每天仅自动复制一次</li>
</ol>
<h4 id="V-3-7"><a href="#V-3-7" class="headerlink" title="V 3.7"></a>V 3.7</h4><blockquote>
<p>2018.10.03</p>
</blockquote>
<p>新增</p>
<ol>
<li>成绩搜索，可以单独搜索成绩，实时显示搜索结果</li>
<li>兰大邮箱，主要用于提醒新邮件，查看邮件详情暂时效果不佳，后续会改进，但计划不会支持发邮件</li>
<li>信息流，与学校合作，为学校网站增加相关接口，目前显示学工网信息，支持查看详情以及附件下载，点开以后，浏览量会增加</li>
</ol>
<p>优化：<br>2.  图书检索，支持搜索条件选择，数据源重新设计，大幅度提高翻页响应时间<br>3.  多个界面菜单，支持选择后，发生对应变化<br>4.  多个界面状态栏，支持上滑自动隐藏</p>
<p>修复Bug：<br>2.  课程单双周相互覆盖，显示错误，以及双周的第一周不显示<br>3.  修改课程修复部分错误<br>4.  导入课程修复部分课程导入错误以及下方出现空白的Bugs</p>
<h4 id="V-3-6"><a href="#V-3-6" class="headerlink" title="V 3.6"></a>V 3.6</h4><blockquote>
<p>2018.09.13</p>
</blockquote>
<p>新增:</p>
<ol>
<li>领取支付宝红包，可通过领取支付宝红包支持开发者，详见右上角“解答分享”</li>
<li>侧栏，电脑软件下载，可选隐藏</li>
<li>启动页面自定义设置中，“别有洞天-基本设置”，第一项</li>
<li>侧栏条目可选隐藏设置中，“别有洞天-基本设置-侧栏自定义”</li>
<li>增加多种退出手势，多种手势可选，“别有洞天-基本设置”，第二项</li>
<li>20点后显示明日课程，可选，默认开启</li>
</ol>
<p>优化：<br>2.  学期课程，非本周课程灰色显示，学期课程圆角显示<br>3.  今日课程，主界面切换明天今天等，不再容易点进去每日一句<br>4.  桌面小部件，显示当前周，周几，只导入一个人课程不再显示姓名<br>5.  图书查询，进一步优化，可点击查看详情</p>
<p>修复Bug：<br>2.  部分同学查看成绩闪退部分总评成绩非数字，而是“及格”两个字，造成闪退<br>3.  别有洞天-个人中心-个性化默认头像与默认背景设置项对应反了<br>4.  空教室查询随着教务系统改版，新增中午12节课<br>5.  其他若干，我也忘了修了多少…</p>
<h4 id="V-3-0"><a href="#V-3-0" class="headerlink" title="V 3.0"></a>V 3.0</h4><blockquote>
<p>2018.09.06）</p>
</blockquote>
<p>新增：</p>
<ol>
<li>增加图书馆图书查询（主界面，右上角搜索按钮），试用中，尚未完善，等待图书馆可以使用</li>
</ol>
<p>优化：<br>2.  登录功能改版，从兰大信息门户登录教务系统，<strong>无需验证码</strong>，且<strong>密码可找回</strong>（官网好像有点问题），只保留主界面登录弹框，旧版登陆方式仍保留，“别有洞天-个人中心-登录方式”可修改<br>3.  课表界面，日期随周数改变，并显示上课时间<br>4.  空闲教室，一键查询今日教室信息<br>5.  支持直接进入课表界面，桌面小部件，点击黄色部分，直接进入学期课程</p>
<p>修复Bug：<br>2.  桌面小部件，第二人课表显示错误<br>3.  空闲教室，首次登陆后仍不可选择时间<br>4.  其他若干，我也忘了修了多少…</p>
<h4 id="V-2-8-1"><a href="#V-2-8-1" class="headerlink" title="V 2.8.1"></a>V 2.8.1</h4><p>修复Bug（最后几条……）：</p>
<ol>
<li>2.8以下版本第一次更新，部分机型闪退，不确定修复的怎么样，注意看更新以后有没有清除成功提示</li>
<li>桌面小部件，切换某些更新频率闪退</li>
<li>删除课程，低配置手机界面出现短暂黑屏</li>
<li>当前周偶尔显示错误，彻底修复（需要开发者开学前更新一次版本）</li>
<li>登录界面，验证码或密码输入错误，导致闪退</li>
<li>成绩查询，导入失败后，即使还有以前的数据，学期也永远计算错误</li>
<li>空闲教室，提示验证码失效，却不登录，仍要查询，导致闪退</li>
<li>第一次安装，主界面看到登录弹框也不登录、或登录10分钟以后，才点“学期课程”，导致闪退</li>
<li>今日课程出现重复，原因是在学期课程界面导入多次</li>
</ol>
<h4 id="V-2-8"><a href="#V-2-8" class="headerlink" title="V 2.8"></a>V 2.8</h4><p>增加：</p>
<ol>
<li>头像，头像背景，点击可更换，设置（别有洞天-个人中心）中可还原默认，</li>
<li>课表背景，课程表界面右上角可更换，设置（别有洞天-个性课表）中可还原默认，字体可调节为白色</li>
<li>输入框，所有输入框最右端增加一键清除</li>
<li>添加课程重写，增加颜色拾取，添加彩色图标，修复修改课程时，其余时段相同课程无法同步更改颜色bug</li>
<li>左边缘侧滑返回，大多数界面左<strong>边缘</strong>侧滑（设置界面不可），退出当前界面，进入前一个界面</li>
<li>输入框，所有输入框最右端增加一键清除</li>
<li>开源相关，点击可直接跳转至相关网页</li>
</ol>
<p>优化：</p>
<ol>
<li>侧滑栏菜单，添加彩色图标，去除滑条、选中阴影等</li>
<li>侧栏顶端，添加彩色背景，更改为斜线图，增加使用日期统计</li>
<li>输入框，所有输入框采用质感框替代</li>
<li>其他美化，还有，但是我也记不住了…..</li>
</ol>
<h4 id="V-2-0"><a href="#V-2-0" class="headerlink" title="V 2.0"></a>V 2.0</h4><p>增加：</p>
<ol>
<li>空教室查询，可按照时间筛选</li>
<li>每日一句，点击可进入时间线布局，支持获取所有数据（至2012.01.01），数据来自金山词霸</li>
<li>主界面所有元素可隐藏，隐藏可提高启动速度</li>
<li>桌面小部件更新频率可选，减少资源浪费</li>
<li>问题解答，深入了解软件使用</li>
<li>引入markdown布局</li>
<li>系统时间核对，防止每日一句数据加载错误</li>
<li>更新日志弹出提醒</li>
</ol>
<p>优化：<br>9.  捐赠名单、更新日志、问题解答采用markdown语法重写<br>10. 引入弹框动画，侧栏“联系我吗”“支持一下”有体现<br>11. 重写消息提示样式<br>12. 密码修改移动到：别有洞天-基本设置，<br>13. 分享一下移动到：别有洞天-了解一下，<br>14. 考试安排暂时去除</p>
<h4 id="V-1-1"><a href="#V-1-1" class="headerlink" title="V 1.1"></a>V 1.1</h4><ol>
<li>增加，四个下滑刷新动态</li>
<li>增加，捐赠名单</li>
<li>增加，开源相关</li>
<li>美化，关于、图书、课程表界面，Toasty消息</li>
<li>修复，桌面小部件不显示周日课程\n” +</li>
<li>修复，关于界面，部分信息显示、跳转错误”</li>
</ol>
<h4 id="V-1-0"><a href="#V-1-0" class="headerlink" title="V 1.0"></a>V 1.0</h4><ol>
<li>新增，课程修改、删除、增加以及课程颜色自定义</li>
<li>新增，图书馆借阅信息查询、提醒、续借</li>
<li>新增，桌面小部件(测试中……）</li>
<li>新增，QQ用户群跳转（点击联系开发者）</li>
<li>新增，支付宝捐赠，酷安好评</li>
<li>新增，设置界面，自定义公告可隐藏、借阅信息提醒间隔</li>
<li>新增，引入卡片布局，重写部分界面</li>
<li>修复，课程表界面下滑刷新、加载弹框等一堆堆Bug”</li>
</ol>
<h3 id="小小一棵树"><a href="#小小一棵树" class="headerlink" title="小小一棵树"></a>小小一棵树</h3><h4 id="V-1-3-beta"><a href="#V-1-3-beta" class="headerlink" title="V 1.3.beta"></a>V 1.3.beta</h4><ol>
<li>新增，主界面登陆，课程表导入，关于界面检查更新，支持下滑刷新</li>
<li>新增，主界面今日无课时提示语</li>
<li>去除，每次进入时，总是弹出最新版提示语</li>
<li>优化，主界面、关于界面，滑动改为全屏滑动</li>
<li>新增，捐赠、分享、好评选项</li>
</ol>
<h4 id="V-1-2-beta"><a href="#V-1-2-beta" class="headerlink" title="V 1.2.beta"></a>V 1.2.beta</h4><ol>
<li>新增，关于界面，以及进入时检查更新</li>
<li>去除，每次进去应用，检测单cookie失效后弹出的登录界面，需要刷新数据可以通过右上角登陆进行更新cookies（有效期十分钟）</li>
<li>新增，主界面今日课程，课程按照时间顺序排序，可以向前向后移动天数、恢复今天，进行查看</li>
<li>修复，成绩查询，课程信息，点开的详情界面仍出现省略号的bug</li>
<li>优化，教务系统公告，用户姓名数据本地化</li>
</ol>
<h4 id="V-1-1-beta"><a href="#V-1-1-beta" class="headerlink" title="V 1.1.beta"></a>V 1.1.beta</h4><ol>
<li>优化软件界面，修改配色，</li>
<li>修改图标（图标来源网络，重新加工）</li>
<li>修复部分课表导入失败，</li>
<li>修复修改密码成功提示语，</li>
<li>新增联系开发者。</li>
</ol>
<h4 id="V-1-0-beta"><a href="#V-1-0-beta" class="headerlink" title="V 1.0.beta"></a>V 1.0.beta</h4><ol>
<li>支持添加两个人的课程信息，目前不支持编辑</li>
<li>兰州大学物理实验不确定度的计算</li>
<li>增加课程成绩查询，</li>
<li>增加教学公告界面，</li>
<li>修复不确定度就计算中输入错误闪退bug</li>
<li>删除登陆界面，改为弹窗式</li>
<li>cookies保存至本地，十分钟内可登陆”)</li>
</ol>
<hr>
<h2 id="✨感谢有你"><a href="#✨感谢有你" class="headerlink" title="✨感谢有你"></a>✨感谢有你</h2><p>2020年7月之前兰朵儿无广告、免费，2019年3月与学校合作前，兰朵儿开放捐赠通道，有一些同学们捐赠支持</p>
<h3 id="最新红包"><a href="#最新红包" class="headerlink" title="最新红包"></a>最新红包</h3><blockquote>
<p>2018.12.3</p>
</blockquote>
<p>11月起只能通过搜索码令红包，很不容易的（以前“支口令”大多被动领红包），<br>如今，名字只有一个字能看到，很不准，以后不再记录单次1元以下<br>以下是大于3次或大于1.00元的：</p>
<table>
<thead>
<tr>
<th align="center">用户</th>
<th align="center">领取次数</th>
<th align="center">累计金额</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*涛</td>
<td align="center">23</td>
<td align="center">25.76</td>
</tr>
<tr>
<td align="center">*鹏</td>
<td align="center">20</td>
<td align="center">12.65</td>
</tr>
<tr>
<td align="center">*旭</td>
<td align="center">2</td>
<td align="center">12.57</td>
</tr>
<tr>
<td align="center">*琪</td>
<td align="center">2</td>
<td align="center">9.88</td>
</tr>
<tr>
<td align="center">*元帅</td>
<td align="center">3</td>
<td align="center">9.74</td>
</tr>
<tr>
<td align="center">*康龙</td>
<td align="center">18</td>
<td align="center">9.44</td>
</tr>
<tr>
<td align="center">*帅</td>
<td align="center">12</td>
<td align="center">9.43</td>
</tr>
<tr>
<td align="center">*英</td>
<td align="center">23</td>
<td align="center">9.33</td>
</tr>
<tr>
<td align="center">*杰</td>
<td align="center">1</td>
<td align="center">7.20</td>
</tr>
<tr>
<td align="center">*睿</td>
<td align="center">1</td>
<td align="center">6.25</td>
</tr>
<tr>
<td align="center">*畅</td>
<td align="center">1</td>
<td align="center">5.72</td>
</tr>
<tr>
<td align="center">*奥鹏</td>
<td align="center">3</td>
<td align="center">4.54</td>
</tr>
<tr>
<td align="center">*晶</td>
<td align="center">2</td>
<td align="center">2.53</td>
</tr>
<tr>
<td align="center">*炫</td>
<td align="center">1</td>
<td align="center">2.5</td>
</tr>
<tr>
<td align="center">*明</td>
<td align="center">1</td>
<td align="center">2.45</td>
</tr>
<tr>
<td align="center">*杰</td>
<td align="center">2</td>
<td align="center">2.27</td>
</tr>
<tr>
<td align="center">*达</td>
<td align="center">10</td>
<td align="center">1.86</td>
</tr>
<tr>
<td align="center">*乐</td>
<td align="center">2</td>
<td align="center">1.52</td>
</tr>
<tr>
<td align="center">*乐乐</td>
<td align="center">1</td>
<td align="center">1.37</td>
</tr>
<tr>
<td align="center">*华</td>
<td align="center">1</td>
<td align="center">1.27</td>
</tr>
<tr>
<td align="center">*凯豪</td>
<td align="center">4</td>
<td align="center">1.15</td>
</tr>
<tr>
<td align="center">*思</td>
<td align="center">2</td>
<td align="center">1.08</td>
</tr>
<tr>
<td align="center">*紫珩</td>
<td align="center">4</td>
<td align="center">0.9</td>
</tr>
<tr>
<td align="center">*昭</td>
<td align="center">3</td>
<td align="center">0.67</td>
</tr>
</tbody></table>
<p>只有不到十天，出现了超过100份红包支持，非常感谢，但是由于记录工作量太大，这里只记录了超过1元的名单</p>
<table>
<thead>
<tr>
<th align="center">用户</th>
<th align="center">随机红包</th>
<th align="center">捐赠时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*小明</td>
<td align="center">6.11</td>
<td align="center">2018/10/22</td>
</tr>
<tr>
<td align="center">*璐</td>
<td align="center">6.21</td>
<td align="center">2018/10/18</td>
</tr>
<tr>
<td align="center">*晓娟</td>
<td align="center">2.61</td>
<td align="center">2018/10/18</td>
</tr>
<tr>
<td align="center">*家豪</td>
<td align="center">1.86</td>
<td align="center">2018/10/13</td>
</tr>
<tr>
<td align="center">*梦</td>
<td align="center">1.16</td>
<td align="center">2018/10/13</td>
</tr>
<tr>
<td align="center">*瑞欣</td>
<td align="center">1.60</td>
<td align="center">2018/10/08</td>
</tr>
<tr>
<td align="center">*冰</td>
<td align="center">6.16</td>
<td align="center">2018/09/25</td>
</tr>
<tr>
<td align="center">*祯齐</td>
<td align="center">6.12</td>
<td align="center">2018/09/23</td>
</tr>
<tr>
<td align="center">*睿思</td>
<td align="center">3.53</td>
<td align="center">2018/09/22</td>
</tr>
<tr>
<td align="center">*金涛</td>
<td align="center">1.33</td>
<td align="center">2018/09/20</td>
</tr>
<tr>
<td align="center">*家豪</td>
<td align="center">1.18</td>
<td align="center">2018/09/20</td>
</tr>
<tr>
<td align="center">*卓洋</td>
<td align="center">14.41</td>
<td align="center">2018/09/17</td>
</tr>
<tr>
<td align="center">*珂滢</td>
<td align="center">3.35</td>
<td align="center">2018/09/15</td>
</tr>
<tr>
<td align="center">*少东</td>
<td align="center">1.91</td>
<td align="center">2018/09/14</td>
</tr>
<tr>
<td align="center">*玉红</td>
<td align="center">3.00</td>
<td align="center">2018/09/13</td>
</tr>
</tbody></table>
<h3 id="最新捐赠"><a href="#最新捐赠" class="headerlink" title="最新捐赠"></a>最新捐赠</h3><p>（2018.12.3）</p>
<h4 id="旧版：兰朵儿"><a href="#旧版：兰朵儿" class="headerlink" title="旧版：兰朵儿"></a>旧版：兰朵儿</h4><table>
<thead>
<tr>
<th align="center">用户</th>
<th align="center">次数</th>
<th align="center">捐赠时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*祎</td>
<td align="center">1</td>
<td align="center">2018-08-05</td>
</tr>
<tr>
<td align="center">*永强</td>
<td align="center">1</td>
<td align="center">2018-08-07</td>
</tr>
<tr>
<td align="center">*乐乐</td>
<td align="center">1</td>
<td align="center">2018-08-09</td>
</tr>
<tr>
<td align="center">*卫国</td>
<td align="center">1</td>
<td align="center">2018-08-10</td>
</tr>
<tr>
<td align="center">*永强</td>
<td align="center"><strong>2</strong></td>
<td align="center">2018-08-11</td>
</tr>
<tr>
<td align="center">*永强</td>
<td align="center"><strong>3</strong></td>
<td align="center">2018-08-20</td>
</tr>
<tr>
<td align="center">*溪雯</td>
<td align="center">1</td>
<td align="center">2018-08-20</td>
</tr>
<tr>
<td align="center">*睿思</td>
<td align="center"><strong>2</strong></td>
<td align="center">2018-08-25</td>
</tr>
<tr>
<td align="center">*国栋</td>
<td align="center">1</td>
<td align="center">2018-09-01</td>
</tr>
<tr>
<td align="center">*代龙</td>
<td align="center">1</td>
<td align="center">2018-09-02</td>
</tr>
<tr>
<td align="center">*晓鹏</td>
<td align="center">1</td>
<td align="center">2018-09-02</td>
</tr>
<tr>
<td align="center">*佳龙</td>
<td align="center">1</td>
<td align="center">2018-09-02</td>
</tr>
<tr>
<td align="center">*芙蓉</td>
<td align="center">1</td>
<td align="center">2018-09-04</td>
</tr>
<tr>
<td align="center">*瑞欣</td>
<td align="center">1</td>
<td align="center">2018-09-07</td>
</tr>
<tr>
<td align="center">*高</td>
<td align="center">1</td>
<td align="center">2018-09-10</td>
</tr>
<tr>
<td align="center">*映宏</td>
<td align="center">1</td>
<td align="center">2018-09-12</td>
</tr>
<tr>
<td align="center">*凌云</td>
<td align="center">1</td>
<td align="center">2018/9/18</td>
</tr>
<tr>
<td align="center">*文欢</td>
<td align="center">1</td>
<td align="center">2018/9/20</td>
</tr>
<tr>
<td align="center">*智玉</td>
<td align="center">1</td>
<td align="center">2018/9/21</td>
</tr>
<tr>
<td align="center">*振凯</td>
<td align="center">1</td>
<td align="center">2018/9/22</td>
</tr>
<tr>
<td align="center">*辰皓</td>
<td align="center">1</td>
<td align="center">2018/9/22</td>
</tr>
<tr>
<td align="center">*世娇</td>
<td align="center">1</td>
<td align="center">2018/9/24</td>
</tr>
<tr>
<td align="center">*璐垚</td>
<td align="center">1</td>
<td align="center">2018/9/24</td>
</tr>
<tr>
<td align="center">*立志</td>
<td align="center">1</td>
<td align="center">2018/9/25</td>
</tr>
<tr>
<td align="center">*红</td>
<td align="center">1</td>
<td align="center">2018/9/26</td>
</tr>
<tr>
<td align="center">*思妤</td>
<td align="center">1</td>
<td align="center">2018/9/28</td>
</tr>
<tr>
<td align="center">*源</td>
<td align="center">1</td>
<td align="center">2018/9/28</td>
</tr>
<tr>
<td align="center">*伊薇</td>
<td align="center">1</td>
<td align="center">2018/10/5</td>
</tr>
<tr>
<td align="center">*挺</td>
<td align="center">1</td>
<td align="center">2018/10/7</td>
</tr>
<tr>
<td align="center">*卓玲</td>
<td align="center">1</td>
<td align="center">2018/10/7</td>
</tr>
<tr>
<td align="center">*香</td>
<td align="center">1</td>
<td align="center">2018/10/18</td>
</tr>
<tr>
<td align="center">*永强</td>
<td align="center"><strong>4</strong></td>
<td align="center">2018/10/25</td>
</tr>
<tr>
<td align="center">*凯豪</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/10/29</td>
</tr>
<tr>
<td align="center">*凯豪</td>
<td align="center"><strong>2</strong></td>
<td align="center">2018/10/29</td>
</tr>
<tr>
<td align="center">*世龙</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/10/30</td>
</tr>
<tr>
<td align="center">*凯豪</td>
<td align="center"><strong>3</strong></td>
<td align="center">2018/10/31</td>
</tr>
<tr>
<td align="center">*凯豪</td>
<td align="center"><strong>4</strong></td>
<td align="center">2018/11/02</td>
</tr>
<tr>
<td align="center">*凯豪</td>
<td align="center"><strong>5</strong></td>
<td align="center">2018/11/03</td>
</tr>
<tr>
<td align="center">*伊薇</td>
<td align="center"><strong>2</strong></td>
<td align="center">2018/11/06</td>
</tr>
<tr>
<td align="center">*远航</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/11/11</td>
</tr>
<tr>
<td align="center">*凌云</td>
<td align="center"><strong>2</strong></td>
<td align="center">2018/11/13</td>
</tr>
<tr>
<td align="center">*泓霖</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/11/27</td>
</tr>
<tr>
<td align="center">*慧娟</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/1</td>
</tr>
<tr>
<td align="center">*克英</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/4</td>
</tr>
<tr>
<td align="center">*位雨</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/6</td>
</tr>
<tr>
<td align="center">*思狄</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/6</td>
</tr>
<tr>
<td align="center">*建华</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/7</td>
</tr>
<tr>
<td align="center">*亦超</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/15</td>
</tr>
<tr>
<td align="center">*智涵</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/20</td>
</tr>
<tr>
<td align="center">*智玉</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/29</td>
</tr>
<tr>
<td align="center">*玉南</td>
<td align="center"><strong>1</strong></td>
<td align="center">2018/12/31</td>
</tr>
<tr>
<td align="center">*杰</td>
<td align="center"><strong>1</strong></td>
<td align="center">2019/1/7</td>
</tr>
<tr>
<td align="center">*威震</td>
<td align="center"><strong>1</strong></td>
<td align="center">2019/1/14</td>
</tr>
<tr>
<td align="center">*文俊</td>
<td align="center"><strong>1</strong></td>
<td align="center">2019/1/14</td>
</tr>
<tr>
<td align="center">*文领</td>
<td align="center"><strong>1</strong></td>
<td align="center">2019/1/20</td>
</tr>
<tr>
<td align="center">*弋乾</td>
<td align="center"><strong>1</strong></td>
<td align="center">2019/1/21</td>
</tr>
</tbody></table>
<h4 id="最初版本：小小一棵树"><a href="#最初版本：小小一棵树" class="headerlink" title="最初版本：小小一棵树"></a>最初版本：小小一棵树</h4><table>
<thead>
<tr>
<th align="center">用户</th>
<th align="center">次数</th>
<th align="center">捐赠时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*玉乾</td>
<td align="center">1</td>
<td align="center">2018-04-23</td>
</tr>
<tr>
<td align="center">*睿思</td>
<td align="center">1</td>
<td align="center">2018-04-23</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>兰朵儿</category>
      </categories>
      <tags>
        <tag>ldr</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu20.04全新配置</title>
    <url>/2021/07/10/2021-07-10-ubuntu20.04%E5%85%A8%E6%96%B0%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>此时搜狗输入法等都一直支持ubuntu20.04</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>注意我的用户名是 <code>yuh</code>，遇到yuh，一般可修改为自己的用户名</p>
</blockquote>
<h3 id="安装ubuntu前"><a href="#安装ubuntu前" class="headerlink" title="安装ubuntu前"></a>安装ubuntu前</h3><ul>
<li><p>系统版本</p>
<p>  最小安装Ubuntu</p>
</li>
<li><p>代理</p>
</li>
</ul>
<p>如果必须代理才能访问github，提前下载好clash</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz</span><br></pre></td></tr></tbody></table></figure>

<p>并且解压，重命名为 clash</p>
<h3 id="安装ubuntu后"><a href="#安装ubuntu后" class="headerlink" title="安装ubuntu后"></a>安装ubuntu后</h3><h4 id="cuda"><a href="#cuda" class="headerlink" title="cuda"></a>cuda</h4><blockquote>
<p>为什么先安装这个，因为他可能导致驱动弄错了，登录时，循环卡死，这时候还是重装系统吧</p>
</blockquote>
<ul>
<li><p>cuda驱动</p>
<p>安装ubuntu系统时，貌似就有，登录以后在<code>软件更新</code>里，附加驱动，默认显示的470是test，建议更换ppa，使用正式的</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install cuda-drivers-470</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示找不到的话，添加下面的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卡住的话，sudo后面加上 `-E`，不用代理</span></span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa &amp;&amp; sudo apt update -y</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>cuda</p>
<p>按照官网来：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=20.04&amp;target_type=deb_network">ubuntu20.04 deb网络版</a></p>
<p>用这个很方便，也方便更新，当时版本时 11.4</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，下面这几个命令中，如果卡住，网址中的 `nvidia.com`换成`nvidia.cn`</span></span><br><span class="line"></span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin</span><br><span class="line"></span><br><span class="line">sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository <span class="string">"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -y install cuda</span><br></pre></td></tr></tbody></table></figure>

<p>配置路径</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你没有用zsh，编辑这个文件</span></span><br><span class="line">vim ~./bashrc</span><br></pre></td></tr></tbody></table></figure>

<p>末尾添加如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CUDA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CUDA_HOME</span>/lib64<span class="variable">${LD_LIBRARY_PATH:+:<span class="variable">${LD_LIBRARY_PATH}</span>}</span></span><br></pre></td></tr></tbody></table></figure>

<p>测试安装是否成功，先重启电脑，看看能不能正常登录，驱动坏了直接重装系统那</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，必须整个sample都复制过来</span></span><br><span class="line">cp -r /usr/<span class="built_in">local</span>/cuda/samples ~/ &amp;&amp; <span class="built_in">cd</span> ~/samples/1_Utilities/deviceQuery/ &amp;&amp; make &amp;&amp; ./deviceQuery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">make clean &amp;&amp; make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; rm -r samples</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="最小安装缺少"><a href="#最小安装缺少" class="headerlink" title="最小安装缺少"></a>最小安装缺少</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mkdir ~/code &amp;&amp; mkdir ~/code/apps</span><br></pre></td></tr></tbody></table></figure>

<p>最小安装缺很多东西，我记得有些需要安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install git vim htop tree net-tools python3-pip  wget curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># git</span></span><br><span class="line">git config --global user.email <span class="string">"yuhldr@qq.com"</span></span><br><span class="line">git config --global user.name <span class="string">"yuh"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">sudo systemctl start clash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> fail2ban</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">sudo systemctl status clash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启进程</span></span><br><span class="line">sudo systemctl restart clash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你又改了clash.service，需要重新加载</span></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置clash代理"><a href="#配置clash代理" class="headerlink" title="配置clash代理"></a>配置clash代理</h3><ul>
<li><p>1、配置文件</p>
<p>新建<code>~/code/apps/clash</code> 刚才准备好的clash文件，复制到</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mkdir ~/code/apps/clash</span><br></pre></td></tr></tbody></table></figure>

<p>修改为可执行权限</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/apps/clash &amp;&amp; chmod +x ./clash</span><br></pre></td></tr></tbody></table></figure>

<p>在clash文件夹里</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O config.yaml https://d.cloudso.club/link/这个连接每个人不一样，用代理的人应该明白?clash=1&amp;log-level=info</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>2、终端设置</p>
<blockquote>
<p>设置以后，有可能导致添加 <code>ppa</code>时，卡住，这时候加上<code>- E</code>，如 <code>sudo -E add-apt-repository ppa:----</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() {</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>(){</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>3、系统设置</p>
<p>打开系统设置，选择网络，点击网络代理右边的 ⚙ 按钮，选择 <code>手动</code>，填写 <code>HTTP</code> 和 <code>HTTPS</code> 代理为 <code>127.0.0.1:7890</code>，填写 <code>Socks</code> 主机为 <code>127.0.0.1:7891</code>，即可启用系统代理。</p>
</li>
<li><p>4、临时运行（可跳过）</p>
<p>这样运行，关闭终端程序终止</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/apps/clash &amp;&amp; ./clash -d .</span><br></pre></td></tr></tbody></table></figure>

<p>你也可以这样在后台运行，</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/apps/clash &amp;&amp; nohup ./clash -d . &amp;</span><br></pre></td></tr></tbody></table></figure>

<p>如果要杀死程序，</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看pid，是个数字</span></span><br><span class="line">ps -e | grep clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死，把id换成刚才的数字</span></span><br><span class="line"><span class="built_in">kill</span> id</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>5、开机自启</p>
<p>新建运行脚本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /home/yuh/code/apps/clash/clash.sh</span><br></pre></td></tr></tbody></table></figure>

<p>输入 <code>i</code> 开始编辑，输入以下内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/yuh/code/apps/clash</span><br><span class="line">./clash -d .</span><br></pre></td></tr></tbody></table></figure>

<p>systemctl管理</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/clash.service </span><br></pre></td></tr></tbody></table></figure>

<p>输入 <code>i</code> 开始编辑，输入以下内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=VPN Clash</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/yuh/code/apps/clash/clash.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<p>开启</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line"></span><br><span class="line">sudo systemctl start clash</span><br><span class="line">sudo systemctl status clash</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><blockquote>
<p>不要再用bash了……，安装 <code>zsh</code> 和 <code>oh-my-zsh</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install zsh &amp;&amp; sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>

<p>可能会有这个报错：</p>
<ul>
<li>需要代理，懂吧，这里不方便细说，而且及时使用了代理，终端也要配置代理，看我2020-12-2发的帖子</li>
<li>也可以自己在浏览器或者其他地方打开这个 <a href="https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh">安装脚本</a> 的网址，然后把内容保存起来，命名 <code>install.sh</code> 放在WSL的一个目录里，你在那个目录里输入 <code>sh install.sh</code>，运行这个安装脚本就可以了</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection reset by peer <span class="keyword">in</span> connection to raw.github.com:443 </span><br></pre></td></tr></tbody></table></figure>

<p>三个插件：自动补全、高亮、建议 <code>zsh-syntax-highlighting</code>、<code>zsh-autosuggestions</code>、<code>zsh-completions</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-autosuggestions &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-completions</span><br></pre></td></tr></tbody></table></figure>

<p>编辑配置 <code>zsh</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>在最后添加如下内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 快捷</span></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> lm=<span class="string">'ls -l --block-size=m'</span></span><br><span class="line"><span class="built_in">alias</span> lk=<span class="string">'ls -l --block-size=k'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$HOME</span>/.<span class="built_in">local</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() {</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>(){</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启代理</span></span><br><span class="line"><span class="comment"># 设置以后，有可能导致添加 `ppa`时，卡住，这时候加上`- E`，如 `sudo -E add-apt-repository ppa:----`</span></span><br><span class="line">proxy_on</span><br></pre></td></tr></tbody></table></figure>

<p>修改这一行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></tbody></table></figure>

<p>替换修改为，用vim就行，其他也可，看自己习惯</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    extract</span><br><span class="line">    z</span><br><span class="line">    sublime</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-completions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p>生效</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<h3 id="ssh远程访问"><a href="#ssh远程访问" class="headerlink" title="ssh远程访问"></a>ssh远程访问</h3><p>最小安装没有服务器版ssh</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>备份原始的 <code>sshd_config</code> 和 <code>ssh_config</code></p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak &amp;&amp; sudo cp /etc/ssh/ssh_config /etc/ssh/ssh_config.bak</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>编辑 <code>sshd_config</code></p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Port 3008  <span class="comment"># 端口号可以自己设置，尽量不要默认22</span></span><br><span class="line">PermitRootLogin no           <span class="comment"># 如果你需要用 root 直接登录系统则此处改为 yes</span></span><br><span class="line">PasswordAuthentication yes    <span class="comment"># 将 no 改为 yes 表示使用帐号密码方式登录</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>启动 <code>ssh</code>，查看 <code>status</code>，注意这里不能用 <code>systemctl</code></p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line"></span><br><span class="line">sudo systemctl start ssh</span><br><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>ubuntu中<code>~/.ssh</code>，如果你是从其他地方复制过来的 <code>.ssh</code>文件，可能导致有些文件的权限不对，无法登录，正确权限</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 yuh yuh 1M 4月   2 21:42 authorized_keys</span><br><span class="line">-rw-r--r-- 1 yuh yuh 1M 4月  27 16:01 config</span><br><span class="line">-rw------- 1 yuh yuh 1M 12月 18  2020 id_rsa</span><br><span class="line">-rw-r--r-- 1 yuh yuh 1M 12月 18  2020 id_rsa.pub</span><br><span class="line">-rw-r--r-- 1 yuh yuh 1M 7月   9 22:51 known_hosts</span><br></pre></td></tr></tbody></table></figure>

<p>即</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chmod 644 ~/.ssh/authorized_keys</span><br><span class="line">chmod 644 ~/.ssh/config</span><br><span class="line">chmod 644 ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">chmod 600 ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure>

<h3 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install fail2ban</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>配置文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/fail2ban/jail.local</span><br></pre></td></tr></tbody></table></figure>

<p>注意，</p>
<blockquote>
<p>2和3可以干脆不填,它会自己管理</p>
</blockquote>
<ol>
<li>因为用了路由器的虚拟服务器10022转22，所以ssh实际的还是22端口</li>
<li>防火墙用的是firewallcmd，所以 <code>banaction = firewallcmd-ipset</code></li>
<li>因为它的原理是解析登录文件，所以对centos来说 <code>logpath = /var/log/secure</code> 但是对于ubuntu来说 <code>logpath = /var/log/auth.log</code></li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8 210.26.51.241 192.168.1.0/200 172.16.24.37</span><br><span class="line">bantime = 864000</span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 5</span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">port = 22</span><br><span class="line">filter = sshd</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>常用命令</p>
<p>开机自启</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> fail2ban</span><br><span class="line"></span><br><span class="line">sudo systemctl start fail2ban</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看被拦截情况</span></span><br><span class="line">sudo fail2ban-client status sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件以后更新</span></span><br><span class="line">fail2ban-client reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解封</span></span><br><span class="line">sudo fail2ban-client <span class="built_in">set</span> sshd banip 180.95.131.67</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封禁ip</span></span><br><span class="line">sudo fail2ban-client <span class="built_in">set</span> sshd unbanip 180.95.131.67</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>可以看 <a href="https://docs.docker.com/engine/install/ubuntu/">官网</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的，其实新的最小安装的ubuntu2004，不需要</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装需要的工具</span></span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl  gnupg  lsb-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加官方GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置稳定版</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable"</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前用户免sudo，运行docker</span></span><br><span class="line">sudo gpasswd -a <span class="variable">${USER}</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否成功，包含用户名即可</span></span><br><span class="line">cat /etc/group | grep docker</span><br></pre></td></tr></tbody></table></figure>

<h4 id="可视化portainer"><a href="#可视化portainer" class="headerlink" title="可视化portainer"></a>可视化portainer</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 防止更新时数据消失</span></span><br><span class="line">docker volume create portainer_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你上面不设置，也可以直接把 `portainer_data`设置为本地目录，进行映射</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></tbody></table></figure>

<p>浏览器打开 <a href="http://localhost:9000/">点我：localhost:9000</a></p>
<p>第一次要设置账户密码，然后注意选择第一个docker</p>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h3><p>idea，pycharm，vscode，android-studio等，都可以用</p>
<p>可搜索</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo snap search idea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装，有时候会报错，后面加上 `--classic`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你用社区版，可以 pycharm-community，这个名字都是用 `snap search pycharm得到的`</span></span><br><span class="line">sudo snap install intellij-idea-ultimate</span><br><span class="line">sudo snap install pycharm-professional</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo snap install android-studio</span><br><span class="line"></span><br><span class="line"><span class="comment"># vscode</span></span><br><span class="line">sudo snap install code</span><br></pre></td></tr></tbody></table></figure>

<h3 id="nextcloud客户端"><a href="#nextcloud客户端" class="headerlink" title="nextcloud客户端"></a>nextcloud客户端</h3><p>如果你在其他地方有nextcloud服务端，可以在自己电脑上设置客户端</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -E 是因为我设置了终端代理，可能导致添加ppa时卡死</span></span><br><span class="line">sudo -E add-apt-repository ppa:nextcloud-devs/client</span><br><span class="line"></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install nextcloud-client</span><br></pre></td></tr></tbody></table></figure>

<p>开始菜单里可以看到图标</p>
<p>nextcloud设置里可以直接设置开机自启</p>
<h3 id="texlive"><a href="#texlive" class="headerlink" title="texlive"></a>texlive</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 我用的是兰大镜像</span></span><br><span class="line">wget https://mirror.lzu.edu.cn/CTAN/systems/texlive/Images/texlive.iso</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">sudo mkdir /mnt/tex &amp;&amp; sudo mount -o loop ./texlive.iso /mnt/tex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装，按照提示就行，输入 I ，回车</span></span><br><span class="line">sudo /mnt/tex/install-tl</span><br></pre></td></tr></tbody></table></figure>

<p>配置环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你配置了zsh, </span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 如果还是bash， </span></span><br><span class="line">vim ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/texlive/2021/bin/x86_64-linux:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="node、npm"><a href="#node、npm" class="headerlink" title="node、npm"></a>node、npm</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install nodejs npm -y</span><br></pre></td></tr></tbody></table></figure>

<p>现在的hexo博客</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用n安装其他版本node</span></span><br><span class="line">sudo npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装稳定版</span></span><br><span class="line">sudo n stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装长期支持版</span></span><br><span class="line">sudo n lts</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看过期的</span></span><br><span class="line">npm outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新hexo的nexT</span></span><br><span class="line">sudo npm update</span><br></pre></td></tr></tbody></table></figure>

<h3 id="corntab"><a href="#corntab" class="headerlink" title="corntab"></a>corntab</h3><p>crontab首次使用选择编辑器，如果想修改</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.selected_editor</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by /usr/bin/select-editor</span></span><br><span class="line">SELECTED_EDITOR=<span class="string">"/usr/bin/vim"</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="mendeley"><a href="#mendeley" class="headerlink" title="mendeley"></a>mendeley</h3><p><a href="https://www.mendeley.com/guides/download-mendeley-desktop/ubuntu/instructions">官网</a> 给的apt不能安装，用它的<code>deb</code>吧</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://www.mendeley.com/repositories/ubuntu/stable/amd64/mendeleydesktop-latest</span><br><span class="line"></span><br><span class="line">sudo dpkg -i mendeleydesktop-latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般会有依赖失败</span></span><br><span class="line">sudo apt install -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装</span></span><br><span class="line">sudo dpkg -i mendeleydesktop-latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除刚才下载文件</span></span><br><span class="line">rm mendeleydesktop-latest</span><br></pre></td></tr></tbody></table></figure>

<h3 id="lammps"><a href="#lammps" class="headerlink" title="lammps"></a>lammps</h3><p>貌似可以apt安装，但是不建议，因为自己一般用的包很少，而且movie这些命令需要一些依赖，GPU、Python配置也需要</p>
<p>编译安装的源码在这里，也可以看 <a href="https://docs.lammps.org/Build_cmake.html">官网安装</a>，<a href="https://docs.lammps.org/Build_extras.html#gpu">GPU加速</a>，<a href="https://docs.lammps.org/Python_install.html">python接口</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码，太慢的话，看下面的</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lammps/lammps.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内太慢，可以在这里下载</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/yuhldr/lammps.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件</span></span><br><span class="line"><span class="built_in">cd</span> lammps &amp;&amp; mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># movie命令需要 gzip ffmpeg</span></span><br><span class="line">sudo apt install ffmpeg gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译配置选项</span></span><br><span class="line"><span class="comment"># 1. 我用的airebo，需要这个：-D PKG_MANYBODY=yes</span></span><br><span class="line"><span class="comment"># 2. 这个也有用：-D BUILD_OMP=yes</span></span><br><span class="line"><span class="comment"># 3. 如果已经按照最上面配置了cuda，可以支持GPU：-D PKG_GPU=on -D GPU_API=cuda</span></span><br><span class="line"><span class="comment"># 4. 如果支持Python：-D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on -D PKG_PYTHON=on</span></span><br><span class="line"></span><br><span class="line">cmake -D PKG_MANYBODY=yes -D BUILD_OMP=yes  -D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on -D PKG_PYTHON=on -D PKG_GPU=on -D GPU_API=cuda ../cmake</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译，5可以去掉，会用所有cpu核心编译，更快</span></span><br><span class="line">cmake --build . -j5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">cmake --install .</span><br></pre></td></tr></tbody></table></figure>

<p>配置路径，没这个有时会报错，尤其是支持 <code>python</code> 和 <code>GPU</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你没有用zsh，编辑这个文件</span></span><br><span class="line">vim ~./bashrc</span><br></pre></td></tr></tbody></table></figure>

<p>末尾添加如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$HOME</span>/.<span class="built_in">local</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></tbody></table></figure>

<p>编译pdf手册</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 按照前文配置texlive， 并安装如下依赖</span></span><br><span class="line">sudo apt-get install python-virtualenv git doxygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入源码doc目录</span></span><br><span class="line"><span class="built_in">cd</span> lammps/doc</span><br><span class="line">make pdf</span><br></pre></td></tr></tbody></table></figure>

<h3 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h3><p>在线编辑器，基于theia</p>
<p>项目位置 <a href="https://github.com/cdr/code-server">github开源</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></tbody></table></figure>

<p>查看密码，直接修改这个文件里<code>password</code>对应的密码即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat ~/.config/code-server/config.yaml</span><br></pre></td></tr></tbody></table></figure>

<p>开机自启还是用<code>systemctl</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果用nginx代理，可以https，可以二级目录</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https</span></span><br><span class="line">server {</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  域名;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      ssl目录/fullchain.pem;</span><br><span class="line">    ssl_certificate_key  ssl目录/privkey.pem;</span><br><span class="line"></span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf;</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location /yuhVS/ {</span><br><span class="line">            proxy_pass http://localhost:8080/;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection upgrade;</span><br><span class="line">            proxy_set_header Accept-Encoding gzip;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># http转接</span></span><br><span class="line">server {</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  域名;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="nps"><a href="#nps" class="headerlink" title="nps"></a>nps</h3><p>如果你有一台服务器配置了 <a href="https://ehang-io.github.io/nps/#/">nps</a></p>
<p>算了，这里不介绍了，看官网吧，以后有时间在整理吧</p>
<h3 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h3><p>前面已经配置cuda，现在安装 <a href="https://developer.nvidia.com/rdp/cudnn-download">cudnn</a>，需要登录</p>
<p>下载 <code>cuDNN Runtime Library for Ubuntu20.04 x86_64 (Deb)</code></p>
<p>安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo dpkg -i 文件名</span><br></pre></td></tr></tbody></table></figure>

<p>然后tensorflow</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></tbody></table></figure>

<p>可以看 <a href="https://www.tensorflow.org/install">官网</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
        <tag>VPN</tag>
        <tag>Linux</tag>
        <tag>Lammps</tag>
      </tags>
  </entry>
  <entry>
    <title>修改windows10中docker20默认位置</title>
    <url>/2021/05/08/2021-05-08-%E4%BF%AE%E6%94%B9windows10%E4%B8%ADdocker20%E9%BB%98%E8%AE%A4%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>目的，避免C盘爆炸，移动WSL2和docker进入D盘</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><p>系统版本</p>
<p>  windows10专业版：20H2，19042.964</p>
</li>
<li><p>WSL2</p>
<p>  Ubuntu20.04</p>
</li>
<li><p>Docker</p>
<p>  安装 <code>Docker Desktop</code>， Docker版本：20.10.5, build 55c4c88</p>
</li>
</ul>
<p>这里使用 <code>Docker Desktop</code> 安装，不推荐在WSL2中使用linux的方式安装，原因：</p>
<ul>
<li>vscode中不支持</li>
<li>自启需要自己设置</li>
</ul>
<h3 id="安装-Docker-Desktop"><a href="#安装-Docker-Desktop" class="headerlink" title="安装 Docker Desktop"></a>安装 Docker Desktop</h3><p>首先安装 <code>Docker Desktop</code> ，设置中如图，打开WSL2对应的 <code>Ubuntu20.04</code> 开关，然后右下角应用设置：</p>
<p><img src="../images/2021/docker-desktop.png" alt="Docker Desktop设置"></p>
<h3 id="关闭所有"><a href="#关闭所有" class="headerlink" title="关闭所有"></a>关闭所有</h3><p>输入</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></tbody></table></figure>

<p>如图</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">  NAME                   STATE           VERSION</span><br><span class="line">* Ubuntu-20.04           Running         2</span><br><span class="line">  docker-desktop-data    Running         2</span><br><span class="line">  docker-desktop         Running         2</span><br></pre></td></tr></tbody></table></figure>

<p>然后退出 <code>Docker Desktop</code>，状态栏右下角也要退出，彻底退出，</p>
<p>然后停止WSL2，记住之前看到的WSL2对应的系统，输入</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl --shutdown Ubuntu-20.04</span><br></pre></td></tr></tbody></table></figure>

<p>再次查看是否完全停止</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></tbody></table></figure>

<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>根据自己的用户名，打开文件管理器</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users（用户）\你的用户名\AppData\Local\Docker</span><br></pre></td></tr></tbody></table></figure>

<p>剪贴 <code>wsl</code> 文件，复制到其他盘，我这里复制到</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">D:\WSL2\Docker</span><br></pre></td></tr></tbody></table></figure>

<p>然后链接回去，<code>win R</code> 输入 <code>cmd</code> 打开终端输入：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mklink /J C:\Users\yuh\AppData\Local\Docker\wsl D:\WSL2\Docker\wsl</span><br></pre></td></tr></tbody></table></figure>

<p>如果报错，就是因为前面没有完全关闭 docker和wsl2</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>gitalk登录错误403</title>
    <url>/2021/04/27/2021-04-27-gitalk%E7%99%BB%E5%BD%95%E9%94%99%E8%AF%AF403/</url>
    <content><![CDATA[<p>NexT代理配置默认如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  github_id: <span class="comment"># GitHub repo owner</span></span><br><span class="line">  repo: <span class="comment"># Repository name to store issues</span></span><br><span class="line">  client_id: <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  client_secret: <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  admin_user: <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  distraction_free_mode: <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language:</span><br></pre></td></tr></tbody></table></figure>

<p>代理项目会失效，gitalk会升级版本更换这个，但是更新以后，我这边一直不生效，我们其实可以自己加一个代理项</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br></pre></td></tr></tbody></table></figure>

<p>这个网址可以去 <a href="https://gitalk.github.io/">gitalk官网</a> 找到</p>
<p><img src="../images/2021-04/gitalk.png" alt="图"></p>
<p>到 <a href="https://gitalk.github.io/">gitalk官网</a> 登录github，不需要评论，登录过程中，可以看到截图里的这个网址。</p>
<p>参考如下</p>
<p><a href="https://github.com/gitalk/gitalk/issues/429">在授权gitalk后出现403错误</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python第三方库解方程</title>
    <url>/2021/04/26/2021-04-26-python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E8%A7%A3%E6%96%B9%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="非线性方程求解"><a href="#非线性方程求解" class="headerlink" title="非线性方程求解"></a>非线性方程求解</h2><h2 id="方程到代码"><a href="#方程到代码" class="headerlink" title="方程到代码"></a>方程到代码</h2><p>简单一个试一下，方程</p>
<p>$$<br>y=sin(x) + x<br>$$</p>
<p>如果 $x=\frac{\pi}{2}, y = 1+\frac{\pi}{2}$，写出代码如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    y = math.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(f(math.pi/<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 2.5707963267948966</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="库函数转换"><a href="#库函数转换" class="headerlink" title="库函数转换"></a>库函数转换</h2><p>假设我们知道 $y = 1+\frac{\pi}{2}$，求解x，这里我们使用 <code>sympy</code> 库。注意我们需要把 <code>math</code> 这些库的函数（比如 <code>math.sin</code> 和 <code>math.pi</code> ）替换为 <code>sympy</code> 库</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    y = sp.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(f(sp.pi/<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 1 + pi/2</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="使用-sympy-求解"><a href="#使用-sympy-求解" class="headerlink" title="使用 sympy 求解"></a>使用 <code>sympy</code> 求解</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    y = sp.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = sp.symbols(<span class="string">'x'</span>)</span><br><span class="line">y = <span class="number">1</span> + sp.pi / <span class="number">2</span></span><br><span class="line">eqs = sp.Eq(f(x), y)</span><br><span class="line">solution = sp.solve(eqs, x)</span><br><span class="line"></span><br><span class="line">print(solution)</span><br></pre></td></tr></tbody></table></figure>

<p>很不靠谱，求解不出来</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">No algorithms are implemented to solve equation x + sin(x) - pi/2 - 1</span><br></pre></td></tr></tbody></table></figure>

<h2 id="sympy-结合-scipy"><a href="#sympy-结合-scipy" class="headerlink" title="sympy 结合 scipy"></a><code>sympy</code> 结合 <code>scipy</code></h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fsolve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    y = sp.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = sp.symbols(<span class="string">'x'</span>)</span><br><span class="line">y = <span class="number">1</span> + sp.pi / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始值，猜测结果，有时候这个很重要</span></span><br><span class="line">initial_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">func = sp.lambdify(x, f(x) - y)</span><br><span class="line">solution = fsolve(func, initial_value)</span><br><span class="line"></span><br><span class="line">print(solution)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="复杂方程求解"><a href="#复杂方程求解" class="headerlink" title="复杂方程求解"></a>复杂方程求解</h2><p>$$<br>b(v)=\sum_{m=0}^4C_4^mv^m(1-v)^{(4-m)}g(h_i, \beta)<br>$$</p>
<p>其中变量是 $v$，$\omega_i$ 是未知数，$tanh$ 是三角函数，其中 $g(h_i, \beta)$ 如下</p>
<p>其中</p>
<p>$$<br>g(h_i,\beta)=\frac{1}{2}(1+\frac{tanh(\beta h_i)}{tanh(\beta)})<br>$$</p>
<p>其中 $h_i$ 如下</p>
<p>$$<br>h_i=\frac{\omega_im-(4-m)}{\omega_im+(4-m)}<br>$$</p>
<p>如果我们知道 $v=\frac{1}{2}$ 时 $b(\frac{1}{2})=0.07$，我们可以求解未知参数 $\omega_i$ ,代码如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fsolve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">v2bi</span>(<span class="params">v, w_z, beta=<span class="number">2</span></span>):</span></span><br><span class="line">    Cs = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">    b_i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        h_i = (w_z * m - (<span class="number">4</span> - m)) / (w_z * m + (<span class="number">4</span> - m))</span><br><span class="line">        g_i = (<span class="number">1</span> + sp.tanh(beta * h_i) / sp.tanh(beta)) / <span class="number">2</span></span><br><span class="line">        b_i += Cs[m] * (v**m) * ((<span class="number">1</span> - v)**(<span class="number">4</span> - m)) * g_i</span><br><span class="line">    <span class="keyword">return</span> b_i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initial_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">w_i = sp.symbols(<span class="string">'w_i'</span>)</span><br><span class="line">result = <span class="number">0.07</span></span><br><span class="line"></span><br><span class="line">func = sp.lambdify(w_i, v2bi(<span class="number">1</span> / <span class="number">2</span>, w_i) - result)</span><br><span class="line">solution = fsolve(func, initial_value)</span><br><span class="line"></span><br><span class="line">print(solution)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># [0.03433438]</span></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2高级使用</title>
    <url>/2021/04/22/2021-04-22-WSL2%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-安装在其他分区"><a href="#1-安装在其他分区" class="headerlink" title="1. 安装在其他分区"></a>1. 安装在其他分区</h2><p>应用商店的只能安装在C盘，可以直接下载WSL的文件，解压在其他盘，双击或者命令安装即可</p>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">官网下载地址</a></p>
<ul>
<li><p>对于ubuntu20.04直接双击<code>.exe</code> 文件安装即可</p>
</li>
<li><p>Debian 需要使用 PowerShell 安装发行版。 只需导航到包含从上面下载的发行版的文件夹，然后在该目录中运行以下命令，其中，app_name 是 distro.appx 文件的名称</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Add-AppxPackage .\app_name.appx</span><br></pre></td></tr></tbody></table></figure>

<p>  注意：Debain这样安装还是在 $C$ 盘，Ubuntu是安装在解压的目录</p>
</li>
</ul>
<p>其他版本未测试</p>
<h2 id="2-多个WSL2"><a href="#2-多个WSL2" class="headerlink" title="2. 多个WSL2"></a>2. 多个WSL2</h2><p>查看wsl2版本以及正在运行的</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></tbody></table></figure>

<p>设置默认版本，<code>Ubuntu</code>就是上面那个命令看到的其中一个发行版名字</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wslconfig /setdefault Ubuntu</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-压缩储存"><a href="#3-压缩储存" class="headerlink" title="3. 压缩储存"></a>3. 压缩储存</h2><blockquote>
<p>WSL随着使用，占用空间会越来越大，即使你删除WSL2里面的文件，体积不会减少！！！</p>
</blockquote>
<ul>
<li><p>准备</p>
<p>  查看你准备压缩的WSL2名字</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></tbody></table></figure>

<p>  类似如下</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">NAME            STATE           VERSION</span><br><span class="line">* Debian          Running         2</span><br><span class="line">Ubuntu-20.04    Running         2</span><br></pre></td></tr></tbody></table></figure>
<p>  并且确保已经删除了无用文件，但是占用体积没有改变，可以进入对应的wsl2，</p>
<p>  然后 <code>sudo su</code> 进入 `root 用户，输入如下，查看实际占用体积，可能比较慢</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">du -h --max-depth=1 --exclude=/mnt  / | sort -h</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>定位虚拟磁盘文件 <code>ext4.vhdx</code></p>
<p>  如果你要压缩Ubuntu-20.04</p>
<p>  先找到发行版安装位置，定位虚拟磁盘文件 <code>ext4.vhdx</code> 所在，如果你是按照上面的直接下载解压安装在其他盘，找到你解压的位置，如果是在应用商店安装，以ubuntu为例大概在 <code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code></p>
<p>  使用PowerShell导航到 <code>ext4.vhdx</code> 所在位置</p>
</li>
<li><p>停止准备压缩的发行版</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl --shutdown Ubuntu-20.04</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>压缩</p>
<p>  在PowerShell中输入 <code>diskpart</code> 来启动diskpart工具</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">select vdisk file=<span class="string">"C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx"</span></span><br></pre></td></tr></tbody></table></figure>

<p>  <code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code> 改为你刚才定位的 <code>ext4.vhdx</code> 的路径</p>
<p>  选中成功的话，输出的文字中有 <code>successfully</code> 字样</p>
<p>  然后压缩，等待结束</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">compact vdisk</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="4-内存限制"><a href="#4-内存限制" class="headerlink" title="4. 内存限制"></a>4. 内存限制</h2><p>linux会把内存全部缓存，会影响windows10，可以限制wsl最大内存，将 <code>.wslconfig</code> 文件放置在用户文件夹的根目录下（即 <code>C:\Users\&lt;YourUserName&gt;\.wslconfig</code>）来配置全局 WSL 选项，运行 <code>wsl --shutdown</code> 来关闭 WSL 2 虚拟机，重启 WSL 2 ，以确保这些配置生效。</p>
<p>详细的看 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config#configure-global-options-with-wslconfig">官方中文文档</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line"><span class="comment"># 自定义 Linux 内核的绝对路径</span></span><br><span class="line">kernel=&lt;path&gt;</span><br><span class="line"><span class="comment"># 给 WSL 2 虚拟机分配的内存大小</span></span><br><span class="line">memory=&lt;size&gt;</span><br><span class="line"><span class="comment"># 为 WSL 2 虚拟机分配的处理器核心数量</span></span><br><span class="line">processors=&lt;number&gt;</span><br><span class="line"><span class="comment"># 为 WSL 2 虚拟机分配的交换空间，0 表示没有交换空间</span></span><br><span class="line">swap=&lt;size&gt;</span><br><span class="line"><span class="comment"># 自定义交换虚拟磁盘 vhd 的绝对路径</span></span><br><span class="line">swapFile=&lt;path&gt;</span><br><span class="line"><span class="comment"># 是否允许将 WSL 2 的端口转发到主机（默认为 true）</span></span><br><span class="line">localhostForwarding=&lt;bool&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># `&lt;path&gt;` 必须是带反斜杠的绝对路径，例如 `C:\\Users\\kernel`</span></span><br><span class="line"><span class="comment"># `&lt;size&gt;` 必须在后面加上单位，例如 8 GB 或 512 MB</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>石墨烯振动模式</title>
    <url>/2021/03/22/2021-03-22-%E7%9F%B3%E5%A2%A8%E7%83%AF%E6%8C%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一些词汇含义"><a href="#一些词汇含义" class="headerlink" title="一些词汇含义"></a>一些词汇含义</h2><p>前两篇文章，波动方程求解中</p>
<ul>
<li><p>本征值</p>
<p>  $$sin\sqrt{\lambda} l=0$$</p>
<p>  此时，$\lambda$ 只能取特定的值，称为 <strong>本征值</strong></p>
<p>  $$\lambda _n = (\frac{n\pi}{l})^2 \qquad n = 0,1,2,3……$$</p>
<blockquote>
<p>给定边界条件(两端位移为0)，特定时刻，绳子可以有很多满足条件的分布(波谷的个数不同)，每个分布中，绳子的波谷个数 $n$ 不同，$\lambda$ 与 $n$ 相关</p>
</blockquote>
</li>
<li><p>本征函数</p>
<p>  对于每一个本征值 $\lambda_n$对应一个$X_n(x)$的解</p>
<p>  $$X_n(x)=Csin\frac{n\pi}{l}x \qquad n = 0,1,2,3……$$</p>
<p>  这个解，被称为 <strong>本征函数</strong></p>
<blockquote>
<p>给定边界条件(两端位移为0)，特定时刻，绳子可以有很多满足条件的分布，每个分布函数都是本征函数</p>
</blockquote>
</li>
<li><p>本征频率</p>
<p>  对于每一个 $\lambda _n$ 都有一个 $T_n(t)$ 的解与之对应</p>
<p>  $$T_n(t)=A_nsin(a\frac{n\pi}{l}t) + B_ncos(a\frac{n\pi}{l}t) \qquad n = 0,1,2,3……$$</p>
<p>  此时令 $a\frac{n\pi}{l}=\omega_n$，这里的 $\omega_n$ 就是 <strong>本征频率</strong>，上面的式子可以写成</p>
<p>  $$T_n(t)=A_nsin(\omega_nt) + B_ncos(\omega_nt)\qquad n = 0,1,2,3……$$</p>
<blockquote>
<p>绳子上某一点，随时间的位移变化频率</p>
</blockquote>
</li>
</ul>
<p>线性代数中</p>
<blockquote>
<p>参考 <a href="https://zh.wikipedia.org/zh-cn/%E7%89%B9%E5%BE%81%E5%80%BC%E5%92%8C%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F">维基百科</a></p>
</blockquote>
<ul>
<li><p>本征向量与本征值</p>
<p>  $$Av=\lambda v$$</p>
<p>  一个 $n \times n$ 矩阵 $A$ 与 $n \times 1$ 矩阵 $v$ 相乘，等于常数 $\lambda$ 与 矩阵 $v$ 相乘，</p>
<p>  官方：对于一个给定的方阵 $A$ ，它的特征向量 $v$ 经过这个线性变换之后，得到的新向量仍然与原来的 $v$ 保持在同一条直线上，但其长度或方向也许会改变。</p>
<blockquote>
<p>$\lambda$ 为其本征值（eigenvalue，也译本征值、固有值）; $v$ 为本征向量(eigenvector)，也译“特征向量、固有向量”</p>
</blockquote>
</li>
<li><p>举例</p>
</li>
</ul>
<p>如果一个矩阵通过线性变换可以变为对角矩阵</p>
<p>$$<br>A =\left[<br>\begin{matrix}<br>2 &amp;  0 &amp;  0 \\<br>0 &amp; 2 &amp; 0 \\<br>0 &amp; 0 &amp; 4<br>\end{matrix}<br>\right]<br>$$</p>
<p><strong>特征值</strong> 就是2和4。2对应的 <strong>特征向量</strong> 是所有形同 $(a, b, 0)^T$ 的非零向量，而4对应的特征向量是所有形同 $(0,0,c)^{T}$ 的非零向量。2对应的特征空间是一个2维空间，而4对应的特征空间是一个1维空间</p>
<h2 id="构建一维链模型"><a href="#构建一维链模型" class="headerlink" title="构建一维链模型"></a>构建一维链模型</h2><ol>
<li>固定边界条件</li>
</ol>
<p>(0) - (1) - (2) - ….. - (i-1) - (i) - (i+1) - ….. - (n-1) - (n) - (n+1)</p>
<p>(0) 和 (N+1) 两端固定，中间一共N个原子，(-)代表原子之间弹簧连接，以向右为正，第i个原子的位移为 $x_i$，由于固定边界条件，$x_0=x_{n+1}=0$，对于原子(1)收到的力为 $F=-k\Delta x$</p>
<p>$$m\ddot{x_1}=-k(x_1-x_0)+k(x_2-x_1)$$</p>
<p>$$<br>\frac{m\ddot{x_1}}{k} = x_0+x_2-2x_1=<br>\left[<br>\begin{matrix}<br>x_1 &amp; x_2 &amp; … &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; … &amp; x_{n-1} &amp; x_n<br>\end{matrix}<br>\right]<br>\dot{}<br>\left[<br>\begin{matrix}<br>-2 \\ 1 \\ … \\ 0 \\ 0 \\ 0 \\ … \\ 0 \\ 0<br>\end{matrix}<br>\right]<br>$$</p>
<blockquote>
<p>矩阵（行列式）相乘：左行 $\times$ 右列，每一项相加</p>
</blockquote>
<p>同理，对于第i个原子，</p>
<p>$$<br>\frac{m\ddot{x_i}}{k} = x_{i-1}+x_{i+1}-2x_i=<br>\left[<br>\begin{matrix}<br>x_1 &amp; x_2 &amp; … &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; … &amp; x_{n-1} &amp; x_n<br>\end{matrix}<br>\right]<br>\dot{}<br>\left[<br>\begin{matrix}<br>0 \\ 0 \\ … \\ 1 \\ -2 \\ 1 \\ … \\ 0 \\ 0<br>\end{matrix}<br>\right]<br>$$</p>
<p>第n个原子</p>
<p>$$<br>\frac{m\ddot{x_n}}{k} = x_{n-1}+x_{n+1}-2x_n=<br>\left[<br>\begin{matrix}<br>x_1 &amp; x_2 &amp; … &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; … &amp; x_{n-1} &amp; x_n<br>\end{matrix}<br>\right]<br>·<br>\left[<br>\begin{matrix}<br>0 \\ 0 \\ … \\ 0 \\ 0 \\ 0 \\ … \\ 1 \\ -2<br>\end{matrix}<br>\right]<br>$$</p>
<p>又因为x与时间的关系为余弦函数，</p>
<p>$$x_i=A_i cos(\omega t + \phi)  $$</p>
<p>$$\ddot{x_i}=-\omega^2(A_i cos(\omega t + \phi))=-\omega^2 x_i$$</p>
<p>将上面n个式子相加，并代入$\ddot{x_i}=-\omega^2 x_i$</p>
<p>$$<br>-\omega^2\frac{m}{k}\vec{x} = \vec{x}  V<br>$$</p>
<p>其中：<br>$$<br>\vec{x} =<br>\left[<br>\begin{matrix}<br>x_1 &amp; x_2 &amp; … &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; … &amp; x_{n-1} &amp; x_n<br>\end{matrix}<br>\right]<br>$$</p>
<p>$$<br>V=<br>\left[<br>\begin{matrix}<br>-2 &amp; 1  &amp; … &amp; 0 &amp; 0 &amp; 0 &amp; … &amp; 0 &amp; 0\\<br>1  &amp; -2 &amp; … &amp; 0 &amp; 0 &amp; 0 &amp; … &amp; 0 &amp; 0\\<br>… &amp; … &amp; …  &amp; … &amp; …  &amp; … &amp; …  &amp; … &amp; … \\<br>0 &amp; 0 &amp; … &amp; -2 &amp; 1 &amp; 0 &amp; … &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp;  … &amp; 0 &amp; -2 &amp; 1 &amp; … &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; … &amp;  0 &amp; 1 &amp; -2 &amp; … &amp; 0 &amp; 0 \\<br>… &amp; … &amp; …  &amp; … &amp; …  &amp; … &amp; …  &amp; … &amp; … \\<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -2 &amp; 1 \\<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; -2 \\<br>\end{matrix}<br>\right]<br>$$</p>
<p>正好和之前的本征向量、本征值形式相同</p>
<p>$$Av=\lambda v$$</p>
<p>$v=\vec{x}, A=V, \lambda=-\omega^2\frac{m}{k}$</p>
<p>$V$ 矩阵已知，可以求解特征向量 $\vec{x}$（n维），特征值为 $-\omega^2\frac{m}{k}$</p>
<p>求解出来的特征值有n个，每个特征值对应一个特征向量 $\vec{x}$（n维）</p>
<p>使用python求解代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 特征值赋值给tzzs，对应特征向量赋值给tzxls</span></span><br><span class="line"><span class="comment">#! 注意本征值没有从大到小排序</span></span><br><span class="line">tzzs0, tzxls0 = np.linalg.eig(V)</span><br><span class="line"></span><br><span class="line"><span class="comment">#! 深度复制，不然你修改tzzs，tzzs0也变</span></span><br><span class="line">tzzs = copy.deepcopy(tzzs0)</span><br><span class="line"></span><br><span class="line">tzzs = <span class="built_in">sorted</span>(tzzs, reverse=<span class="literal">True</span>)</span><br><span class="line">tzxls = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tzzs)):</span><br><span class="line">    m = np.where(tzzs0 == tzzs[i])[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    tzxls.append(tzxls0[:, m])</span><br><span class="line"></span><br><span class="line">tzxls = np.array(tzxls)</span><br><span class="line">print(tzxls)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="二维石墨烯"><a href="#二维石墨烯" class="headerlink" title="二维石墨烯"></a>二维石墨烯</h2><p>类似，按照FPU本征模式计算本征矩阵</p>
<p>$$<br>V_{mn}=<br>\left\lbrace<br>\begin{matrix}<br>-24 \gamma &amp;  m=n\\<br>-12 \gamma &amp; mn两个原子近邻\\<br>-2 \gamma &amp; mn两个原子次近邻 \\<br>0 &amp; 其他情况<br>\end{matrix}<br>\right.<br>$$</p>
<p>本征值排序以后，前15个本征模式如图</p>
<p><img src="../images/2021-04/graphene_bzms.jpg" alt="图"></p>
<p>本征值(橙色排序后，蓝色排序前)</p>
<p><img src="../images/2021-04/tzz.png" alt="图"></p>
<blockquote>
<p>画图方法：取第一个本征向量，扩大一定倍数，做为石墨烯的z轴坐标，用scatter画图，z轴数值同时作为scatter的颜色</p>
</blockquote>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>石墨烯</tag>
        <tag>振动模式</tag>
      </tags>
  </entry>
  <entry>
    <title>波动方程求解2-分离变量法</title>
    <url>/2021/03/17/2021-03-17-%E6%B3%A2%E5%8A%A8%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A32-%E5%88%86%E7%A6%BB%E5%8F%98%E9%87%8F%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>大量参考《数学物理方法》-杨孔庆</p>
</blockquote>
<h2 id="齐次方程齐次边界条件"><a href="#齐次方程齐次边界条件" class="headerlink" title="齐次方程齐次边界条件"></a>齐次方程齐次边界条件</h2><p>写成方程形式为(注意hexo next用markdown写博客，下面这个公式大括号，每个公式要四个斜杠换行)：</p>
<p>$$<br>\begin{cases}<br>u_{tt}-a^2u_{xx}=0\qquad &amp;(0&lt;x&lt;l,\quad t&gt;0)\\<br>u(0,t)=u(l,t)=0\qquad &amp;(t&gt;0)\\<br>u(x,0)=\phi(x)\qquad &amp;(0&lt;x&lt;l)\\<br>u_t(x,0)=v(x)\qquad &amp;(0&lt;x&lt;l)<br>\end{cases}<br>$$</p>
<p>这四个等式，上一篇文章都推导过</p>
<ul>
<li>第一个：等号右边外力项 $f_0(x,t)=0$，即齐次波动方程，其中 $u_{tt}$ 为弦振动的位移（x轴对应的某一点的弦在y轴方向上下振动）对时间的二阶求导，$u_{xx}$ 为弦函数（某一时刻，整条线呈现为一个y关于x的函数）对x的二阶导</li>
<li>第二个：第一类边界条件，两端固定；</li>
<li>第三个：$t=0$ 的初始状态，弦位置分布；</li>
<li>第四个：$t=0$ 时初始状态，每一点的速度分布。</li>
</ul>
<h3 id="1-分离变量"><a href="#1-分离变量" class="headerlink" title="1. 分离变量"></a>1. 分离变量</h3><p>分离变量法，$u$ 是关于时间 $t$ 和位置 $x$ 的复合函数，我们假设函数的解 $u$ 中，$t$ 与 $x$ 可以分开即最终解为</p>
<p>$$u(x,t)=X(x)T(t)$$</p>
<p>（因为每一时刻 $z$ 整条弦是一个 $y$ 关于 $x$ 的函数，而每一点在不同的时候上下振动也是一个关于时间 $t$ 的函数）<br>将这个形式的解带入到上面的第一个等式中</p>
<p>其中第一项 $u_{tt}$ 为函数 $u$ 对时间 $t$ 的二阶求导（求导两次），对 $t$ 求导时，$X(x)$ 与 $t$ 无关不会变，反之相同；$T’{’}$ 代表 $T(t)$ 对时间的二阶导（这里的“双撇”用英文引号，在hexo next公式里面有问题，我是这么打出来的<code>T’{’}</code>，直接复制，不然有问题）</p>
<p>$$<br>\begin{aligned}<br>u_{tt} &amp;=  \frac{\partial\frac{\partial (X(x)T(t))}{\partial t}}{\partial t}\\<br>&amp;= X(x) \frac{\partial\frac{\partial (T(t))}{\partial t}}{\partial t}\\<br>&amp;= X(x) T(t)’{’}\\<br>&amp;=XT’{’}<br>\end{aligned}<br>$$</p>
<p>同理 $u_{xx}=T(t)X(x)’{’}=TX’{’}$</p>
<p>$$u_{tt}-a^2u_{xx} = XT’{’}-a^2TX’{’}=0$$</p>
<p>$$\frac{T’{’}}{a^2T}=\frac{X’{’}}{X}$$</p>
<p>上面这个等式，左边全部与 $t$ 相关，右边全部与 $x$ 相关，如果他们相等只能是常数，比如如果他们等于 $2t$，那么随着 $t$ 的变化，方程左边变了，但是右边只与 $x$ 有关，是不变的，反之同理</p>
<h3 id="2-X-x-求通解"><a href="#2-X-x-求通解" class="headerlink" title="2. X(x)求通解"></a>2. X(x)求通解</h3><p>因此假设</p>
<p>$$\frac{T’{’}}{a^2T}=\frac{X’{’}}{X}=-\lambda \qquad (\lambda&gt;0)$$</p>
<blockquote>
<p>如果为正，后面的计算中会有冲突</p>
</blockquote>
<p>对于 $\frac{X’{’}}{X}=-\lambda$，即$X’{’}+\lambda X = 0$，这是一个常见的二阶常微分方程，使用特征方程法，我们假设$X = Ce^{r x}$，则有</p>
<p>$$X’{’} + \lambda X = r ^2 C e^{r x} + \lambda C e^{r x} = 0$$</p>
<p>特征方程为：</p>
<p>$$r^2 + \lambda = 0$$</p>
<p>有两个虚数根：</p>
<p>$$r = \pm \sqrt{\lambda} i$$</p>
<p>解有两个${C_1e^{r_1x} ， C_2e^{r_2x}}$，且线性无关，根据解的线性叠加原理可知：</p>
<p>解集 $X= C_1e^{r_1x} + C_2e^{r_2x}=C_1e^{\sqrt{\lambda} ix} + C_2e^{-\sqrt{\lambda} ix}$ 为通解。</p>
<p>对于虚数指数有如下关系（欧拉恒等式）：</p>
<p>$$e^{ix} = cosx +  i sinx$$</p>
<p>则通解为</p>
<p>$$X = C_1e^{\sqrt{\lambda} ix} + C_2e^{-\sqrt{\lambda} ix} = (C_1+C_2)cos\sqrt{\lambda}x+i(C_1-C_2)sin\sqrt{\lambda}x$$</p>
<p>但是包含虚数，因此为了方便运算，我们再取其中两个特解，进行线性叠加，可以得到通解</p>
<ul>
<li><p>当$C_1=C_2=\frac{1}{2}$时，特解为$X=(\frac{1}{2}+\frac{1}{2})cos\sqrt{\lambda}x$</p>
</li>
<li><p>当$C_1=-C_2=\frac{1}{2i}$时，特解为$X=i (\frac{1}{2i}+\frac{1}{2i}) sin\sqrt{\lambda}=sin\sqrt{\lambda}x$</p>
</li>
</ul>
<p>则我们的通解可以写为：</p>
<p>$$X=Csin\sqrt{\lambda}x+Dcos\sqrt{\lambda}x$$</p>
<blockquote>
<p>此处 $C$ 仅仅为线性叠加的常数，与上面的 $C \quad C_1 \quad C_2$无关</p>
</blockquote>
<h3 id="3-X-x-带入边界条件–本征函数、本征值"><a href="#3-X-x-带入边界条件–本征函数、本征值" class="headerlink" title="3. X(x)带入边界条件–本征函数、本征值"></a>3. X(x)带入边界条件–本征函数、本征值</h3><p>对于边界条件 $u(0,t)=u(l,t)=0$ ，将分离变量后 $u(x,t)=X(x)T(t)$ 带入，可得</p>
<p>$$X(0)T(t)=X(l)T(t)$$</p>
<p>显然T(t)不能为0，否则$u(x,t)$恒为0，波动方程不动了……，只能是</p>
<p>$$X(0)=X(l)=0$$</p>
<p>刚才关于$X(x)$的通解为$X=Csin\sqrt{\lambda}x+Dcos\sqrt{\lambda}x$</p>
<p>分别带入边界条件</p>
<p>$X(0)=0$时，$X=Csin\sqrt{\lambda}x+Dcos\sqrt{\lambda}x=D=0$</p>
<p>$X(l)=0$时，$X=Csin\sqrt{\lambda}l+0 \times cos\sqrt{\lambda}x=0$</p>
<p>C不能为0，否则，又变成了恒等式，只能是</p>
<p>$$sin\sqrt{\lambda} l=0$$</p>
<p>此时，$\lambda$ 只能取特定的值，称为 <strong>本征值</strong></p>
<p>$$\sqrt{\lambda}l = n\pi \qquad n = 0,1,2,3……$$</p>
<p>$$\lambda _n = (\frac{n\pi}{l})^2 \qquad n = 0,1,2,3……$$</p>
<p>对于每一个本征值 $\lambda_n$对应一个$X_n(x)$的解</p>
<p>$$X_n(x)=Csin\frac{n\pi}{l}x \qquad n = 0,1,2,3……$$</p>
<p>这个解，被称为 <strong>本征函数</strong></p>
<h3 id="4-T-t-求解–本征频率"><a href="#4-T-t-求解–本征频率" class="headerlink" title="4. T(t)求解–本征频率"></a>4. T(t)求解–本征频率</h3><p>与之前$X(x)$的求解同理，T(t)的通解为</p>
<p>$$T=Asin(a\sqrt{\lambda} t) + Bcos(a\sqrt{\lambda} t)$$</p>
<p>这里的$\lambda$和之前X(x)求解中是一个，所以</p>
<p>$$\lambda _n = (\frac{n\pi}{l})^2 \qquad n = 0,1,2,3……$$</p>
<p>对于每一个 $\lambda _n$ 都有一个 $T_n(t)$ 的解与之对应</p>
<p>$$T_n(t)=A_nsin(a\frac{n\pi}{l}t) + B_ncos(a\frac{n\pi}{l}t) \qquad n = 0,1,2,3……$$</p>
<p>此时令 $a\frac{n\pi}{l}=\omega_n$，这里的 $\omega_n$ 就是 <strong>本征频率</strong>，上面的式子可以写成</p>
<p>$$T_n(t)=A_nsin(\omega_nt) + B_ncos(\omega_nt)\qquad n = 0,1,2,3……$$</p>
<p>这时候，每一个本征值 $\lambda_n$ 都对应一个本征解 $u_n$</p>
<h3 id="4-最终定解"><a href="#4-最终定解" class="headerlink" title="4. 最终定解"></a>4. 最终定解</h3><p>$$u_n(x,t) = X(x)T(t)=Csin\frac{n\pi}{l}x(A_nsin(\omega_nt) + B_ncos(\omega_nt)) n = 0,1,2,3……$$</p>
<p>因为 $A_n \quad B_n \quad C$ 都只是一个积分常数，我们将 $CA_n$ 合并为 $A_n$，注意，前后的 $A_n$ 并不相等，只是代表一个常数，$B_n$ 也做同样处理，式子可以化为</p>
<p>$$u_n(x,t) = X(x)T(t)=sin(\frac{n\pi}{l}x)(A_nsin(\omega_nt) + B_ncos(\omega_nt))\qquad  n = 0,1,2,3……$$</p>
<p>这无穷多个 $u_n$ 都是满足波动方程和边界条件，由线性微分方程解的线性叠加原理可以得知，这一问题的解为无穷多个 $u_n$ 的线性叠加</p>
<p>$$u(x,t)=\sum_{n=1}^\infty u_n(x,t) = \sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_nsin(\omega_nt) + B_ncos(\omega_nt))\qquad  n = 0,1,2,3……$$</p>
<p>其中的 $A_n \quad B_n$可以由最开始的四个方程中的初始状态确定，即方程3、4</p>
<h3 id="5-初始状态：求-A-nB-n"><a href="#5-初始状态：求-A-nB-n" class="headerlink" title="5. 初始状态：求$A_nB_n$"></a>5. 初始状态：求$A_nB_n$</h3><p>对于上面解中</p>
<p>$$\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)\qquad  n = 0,1,2,3……$$</p>
<p>是一个完备的正交函数系</p>
<p>由于初始条件 $\phi(x) \quad v(x)$ 都是定义在 $[0,l]$ 上的，我们可以在这个函数系上进行Fourier展开，如下</p>
<p>$$<br>\phi(x) = \sum_1^n \phi_n sin(\frac{n\pi}{l}x) \tag {5.1}<br>$$</p>
<p>$$v(x) = \sum_1^n v_n sin(\frac{n\pi}{l}x) \tag {5.2}$$</p>
<p>展开系数可以写为</p>
<p>$$\phi_n = \frac{2}{l} \int_0^l \phi(x) sin(\frac{n\pi}{l}x) \tag {5.3}$$</p>
<p>$$v_n = \frac{2}{l} \int_0^l v(x) sin(\frac{n\pi}{l}x) \tag {5.4}$$</p>
<p>最开始的初始状态有</p>
<p>$$<br>\begin{cases}<br>u(x,0)=\phi(x)\qquad &amp;(0&lt;x&lt;l)\\<br>u_t(x,0)=v(x)\qquad &amp;(0&lt;x&lt;l)<br>\end{cases}<br>$$</p>
<p>之前 $u(x,t)$ 已经有解，因此可得</p>
<p>$$<br>\begin{aligned}<br>\phi(x)&amp;=u(x,0)\\<br>&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_nsin(\omega_n 0) + B_ncos(\omega_n 0))\\<br>&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)B_n<br>\end{aligned} \tag {5.5}<br>$$</p>
<p>速度函数，对t求导即可</p>
<p>$$<br>\begin{aligned}<br>v(x)&amp;=u_t(x,0)\\<br>&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_n \omega_n cos(\omega_n t) -B_n \omega_n sin(\omega_n t))\\<br>&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_n \omega_n)<br>\end{aligned} \tag {5.6}<br>$$</p>
<p>注意 $(5.1) \quad (5.5) \quad (5.3)$对比</p>
<p>$$B_n= \phi_n = \frac{2}{l} \int_0^l \phi(x) sin(\frac{n\pi}{l}x)$$</p>
<p>同样，$(5.2) \quad (5.6) \quad (5.4)$对比</p>
<p>$$\begin{aligned}<br>A_n= \frac{v_n}{\omega_n} &amp;= \frac{2}{\omega_nl} \int_0^l \phi(x) sin(\frac{n\pi}{l}x)\\<br>&amp;=\frac{2}{an\pi} \int_0^l \phi(x) sin(\frac{n\pi}{l}x)<br>\end{aligned}$$</p>
<h3 id="6-相关解释"><a href="#6-相关解释" class="headerlink" title="6. 相关解释"></a>6. 相关解释</h3><blockquote>
<p>结合方程，对弦振动的一些解释</p>
</blockquote>
<p>之前求解的 $u(x,t)$ 通过三角函数的和差化积公式可以得到</p>
<p>$$\begin{aligned}<br>u_n(x,t) &amp;= \sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_nsin(\omega_nt) + B_ncos(\omega_nt))\\<br>&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)C_n sin(\omega_n t-\delta_n)<br>\qquad  n = 0,1,2,3……<br>\end{aligned}$$</p>
<p>这里的本征解 $u_n(x,t)$ 表示弦的第 $n$ 个振动模式，其中</p>
<p>$$C_n=\sqrt{A_n^2+B_n^2}$$</p>
<p>$$\delta_n = arctan\frac{B_n}{A_n}$$</p>
<p>$$\omega_n = \frac{an\pi}{l}$$</p>
<blockquote>
<p>$\delta_n$ 表示第 $n$ 个振动模式的相位，$\omega_n$ 表示第 $n$ 个振动模式的频率</p>
</blockquote>
<p>第 $n$ 个振动模式，对于弦上任意一处 $x$ 点的振幅为：</p>
<p>$$a_n(x) = sin(\frac{n\pi}{l}x)C_n$$</p>
<p>显然</p>
<ul>
<li><p>波节：振幅 $a_n=0$ 此时 $x=0,\frac{l}{n},……,\frac{n-1}{n}l$，振幅 $a_n=0$</p>
</li>
<li><p>波腹：振幅最大值 $a_n=0$ $x=\frac{1}{2n}l, \frac{3}{2n}l,……,\frac{2n-1}{2n}l$，振幅 $a_n=C_n$</p>
</li>
</ul>
<blockquote>
<p>n = 1时被称为“基波”；n &gt; 1时被称为“n次谐波”</p>
</blockquote>
]]></content>
      <categories>
        <category>物理</category>
        <category>方程求解</category>
      </categories>
      <tags>
        <tag>数学物理方程</tag>
        <tag>波动方程</tag>
      </tags>
  </entry>
  <entry>
    <title>波动方程求解</title>
    <url>/2021/03/15/2021-03-15-%E6%B3%A2%E5%8A%A8%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>大量参考《数学物理方法》-杨孔庆</p>
</blockquote>
<h2 id="弦振动推导波动方程"><a href="#弦振动推导波动方程" class="headerlink" title="弦振动推导波动方程"></a>弦振动推导波动方程</h2><p>高中竞赛物理常见近似，x趋近于0时，如下（画个三角形显而易见）：</p>
<p>$$cos x = 1  $$</p>
<p>$$ sin x = tan x \times cos x = tanx = x(弧度制)$$</p>
<h3 id="初始设定"><a href="#初始设定" class="headerlink" title="初始设定"></a>初始设定</h3><p>弦：线密度 $\rho$，每一点上下震动（x方向唯一为0）<br><img src="../images/2021-03/string.png" alt="图"></p>
<h3 id="受力分析"><a href="#受力分析" class="headerlink" title="受力分析"></a>受力分析</h3><ol>
<li><p>x处，dx长的的一段绳子（线密度$\rho$）:</p>
<p> 受到三个可能的力，两端的拉力$T_x$和$T_{x+dx}$，与绳子相切，切角大小分别为$\alpha$和$\beta$，并且单位长度弦可能受到外力，暂时认为是竖直方向，$f_0(x,t)$</p>
<p> <img src="../images/2021-03/20210317.png" alt="受力"></p>
</li>
<li><p>由于x轴上没有运动，x方向受力平衡</p>
<p>$$T_xcos\alpha - T_{x+dx} cos\beta = 0$$</p>
<p> 弦的振幅很小，可取$\alpha$$\beta$ -&gt; 0，由上面的近似可得</p>
<p> $$T_x = T_{x+dx} = T$$</p>
</li>
<li><p>竖直方向上，运动方程为</p>
<p> $$Tsin\alpha-T_{x+dx}sin\beta+f_0(x,t)dx=ma=(\rho dx) u_{tt}$$</p>
<p> 其中$u_{tt}$为竖直方向位移对时间的二阶导数</p>
<p> 由最开始的近似关系，可进一步化简为：</p>
<p> $$ Ttan\alpha-Ttan\beta+f_0(x,t)dx=(\rho dx) u_{tt} $$</p>
<p> $tan$函数可以看做斜率：</p>
<p> $$Ttan\alpha-Ttan\beta=T(\frac{\partial u}{\partial x}\bigg|_{x+dx}-\frac{\partial u}{\partial x}\bigg|_x)$$</p>
<p> 其中</p>
<p> $$\frac{\partial u}{\partial x}\bigg|_{x+dx} - \frac{\partial u}{\partial x}\bigg|_x=\frac{\partial^2 u}{\partial^2 x}dx$$<br> 可得</p>
<p> $$T\frac{\partial^2 u}{\partial^2 x}+f_0(x,t)=\rho u_{tt}$$</p>
<p> 写成标准形式：</p>
<p> $$u_{tt}-au_{xx}=f(x,t)$$</p>
<p> 其中 $a=\frac{T}{\rho}$，即振动在弦上传播的速度，$f(x,t)=\frac{f_0(x,t)}{\rho}$被称为外力密度，单位长度密度上所施加的外力。当$f(x,t)=0$，方程变为</p>
<p> $$u_{tt}-a^2u_{xx}=0 (0&lt;x&lt;l,t &gt;0)$$</p>
<p> 即为一次齐次波动方程</p>
</li>
</ol>
<h3 id="定解条件"><a href="#定解条件" class="headerlink" title="定解条件"></a>定解条件</h3><p>“初始条件”与“边界条件”</p>
<h4 id="初始条件"><a href="#初始条件" class="headerlink" title="初始条件"></a>初始条件</h4><p>位移分布和速度分布已知，$\psi(x)$和$v(x)$为已知函数</p>
<p>$$u(x,0)=\psi(x) \qquad 0 \leq x \leq l$$</p>
<p>$$u_t(x,0)=v(x) \qquad 0 \leq x \leq l$$</p>
<h4 id="边界条件"><a href="#边界条件" class="headerlink" title="边界条件"></a>边界条件</h4><p>共三类，分别是：</p>
<ul>
<li>绳子两端固定</li>
<li>绳子两端不收到任何力，自由端</li>
<li>绳子两端是弹簧</li>
</ul>
<ol>
<li><p>固定边界（两端）</p>
<p> 好比最上面的那个图，两端始终在x轴上的某一点即</p>
<p> $$u(0,t)=u(l,t)=0$$</p>
<p> 随着时间t的变化，x=0和x=l处的绳子两端坐标u不变</p>
</li>
<li><p>自由边界（两端）</p>
<p> 在我们之前的方程推导中，默认的是，$x$处的绳子长度$dx$，受到绳子两端的其他绳子拉力为</p>
<p> $$T_x、T_{x+dx}$$</p>
<p> $y$轴方向的受力，x轴方向一律认为不动<br> $$T_xsin\alpha、T_{x+dx}\beta$$</p>
<p> 近似以后为</p>
<p> $$T_xsin\alpha = Ttan\alpha = T\frac{\partial u}{\partial x}\bigg|_x$$</p>
<p> $$T_{x+dx}sin\beta = Ttan\beta = T\frac{\partial u}{\partial x}\bigg|_{x+dx}$$</p>
<p> 而真实情况是，$x=0$和$x=l$处，绳子自由时，这两段绳子只能受到一端绳子的力，另一端外力为0，即</p>
<p> $$T\frac{\partial u}{\partial x}\bigg|_0=0$$</p>
<p> $$T\frac{\partial u}{\partial x}\bigg|_l=0$$</p>
<p> 其中T可以去掉（绳子两端一个外力左下，一个右上，方向不同，但是此处为0，不考虑正负号）</p>
<p> $$\frac{\partial u}{\partial x}\bigg|_0=0$$</p>
<p> $$\frac{\partial u}{\partial x}\bigg|_l=0$$</p>
</li>
<li><p>弹性边界（两端）</p>
<p> 绳子在两个竖直的弹簧上系着，在这种情况下，2中的竖直方向外力不为0，认为是一种弹力，类似于弹簧$f=au$，其中a为弹簧系数，u为y轴竖直方向位移，平衡时，两端受力为（暂时认为向上的力为负）：</p>
<p> $$-\frac{\partial u}{\partial x}\bigg|_0 + a_1u(0,t) = 0$$</p>
<p> $$\frac{\partial u}{\partial x}\bigg|_l + a_2u(l,t) =0$$</p>
<p> 两边弹簧弹性系数不一样，分别为$a_1$，$a_2$。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>物理</category>
        <category>方程求解</category>
      </categories>
      <tags>
        <tag>数学物理方程</tag>
        <tag>波动方程</tag>
      </tags>
  </entry>
  <entry>
    <title>mac10.15配置latex格式化</title>
    <url>/2021/02/23/2021-02-23-mac10.15%E9%85%8D%E7%BD%AElatex%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>mac10.15</p>
<p>vscode格式化latex时报错</p>
<p><code>Formatting failed. Please refer to LaTeX Workshop Output for details.</code></p>
<p>并且按照之前的mac系统，运行以下也不行，仍然提示缺少<code>File::HomeDir</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo cpan -i Log::Log4perl Log::Dispatch::File\ YAML::Tiny File::HomeDir Unicode::GCString</span><br></pre></td></tr></tbody></table></figure>

<p>其实是在运行<code>sudo cpan -i</code>时，提示了</p>
<p><code>fatal error: 'EXTERN.h' file not found</code></p>
<p>而且查找这个库时</p>
<p><code>sudo find /Library -type f -name EXTERN.h</code></p>
<p>可以找到这个库所在位置</p>
<ul>
<li>前提是已经安装了xcode命令行工具<code>xcode-select --install</code>输入到终端即可</li>
</ul>
<p>按理说，随便找一个路径刚才查到的路径，在终端输入即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Perl/5.28/darwin-thread-multi-2level/CORE:<span class="variable">$CPATH</span></span><br></pre></td></tr></tbody></table></figure>

<p>可是<code>File::HomeDir</code>时还是不对，提示权限错误等问题</p>
<p>注意，保持没有改变终端窗口，防止环境变量失效</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo find /Library -<span class="built_in">type</span> f -name EXTERN.h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Perl/5.28/darwin-thread-multi-2level/CORE:<span class="variable">$CPATH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cpan</span><br><span class="line"></span><br><span class="line">install Mac::SystemDirectory</span><br><span class="line"></span><br><span class="line">install File::HomeDir</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>解决</p>
]]></content>
      <categories>
        <category>物理</category>
        <category>科研工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置安装gitlab</title>
    <url>/2020/12/27/2020-12-28-docker%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85gitlab/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>进入root用户进行操作</p>

</blockquote>

<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>查看2020-11-09的 <code>docker配置安装nextcloud</code></p>
<h2 id="docker安装gitlab"><a href="#docker安装gitlab" class="headerlink" title="docker安装gitlab"></a>docker安装gitlab</h2><h3 id="拉取gitlabc-ce"><a href="#拉取gitlabc-ce" class="headerlink" title="拉取gitlabc-ce"></a>拉取gitlabc-ce</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d -p 208:80 -p 230:22 --name gitlab --restart always -v /home/data/docker/gitlab-ce/config:/etc/gitlab -v /home/data/docker/gitlab-ce/logs:/var/<span class="built_in">log</span>/gitlab -v /home/data/docker/gitlab-ce/data:/var/opt/gitlab gitlab/gitlab-ce:latest</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>这三个是为了把docker里 <code>gitlab</code> 的一些文件夹映射到服务器上，方便https什么的，两边文件会共享</p>
<p>  <code>-v /home/data/docker/gitlab-ce/config:/etc/gitlab</code></p>
<p>  <code>-v /home/data/docker/gitlab-ce/logs:/var/log/gitlab</code></p>
<p>  <code>-v /home/data/docker/gitlab-ce/data:/var/opt/gitlab</code></p>
</li>
<li><p>把docker里面的80和22映射到208和230，</p>
<blockquote>
<p>这个是为了防止docker里面的80和22端口已经被占用。</p>
</blockquote>
<ul>
<li><p>注意服务器的208和230对外界要公开，把防火墙端口打开，</p>
</li>
<li><p>80是网页的端口，22是用来ssh访问git的，注意230不要是服务器本来的ssh端口</p>
<p><code>-p 208:80 -p 230:22</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入docker里的gitlab</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<p>编辑</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></tbody></table></figure>

<p>添加下面这三行就行</p>
<p><code>icpcs.lzu.edu.cn</code>是服务器的域名，208是刚才对外的网页端口，230是git的ssh免密访问</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">external_url <span class="string">'http://icpcs.lzu.edu.cn:208'</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_ssh_host'</span>] = <span class="string">'icpcs.lzu.edu.cn'</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = 230</span><br></pre></td></tr></tbody></table></figure>

<p>如果要ssl的话，先自己certbot设置免费的CA证书，再添加这几个</p>
<blockquote>
<p><code>/etc/gitlab/ssl/</code> 这个是我把服务器上的CA证书复制到了刚才映射的外部文件夹<code>/home/data/docker/gitlab-ce/config/ssl/</code>，但是docker里的gitlab访问就变成了<code>/etc/gitlab/ssl/</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nginx[<span class="string">'redirect_http_to_https'</span>] = <span class="literal">true</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate'</span>] = <span class="string">"/etc/gitlab/ssl/fullchain.pem"</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate_key'</span>] = <span class="string">"/etc/gitlab/ssl/privkey.pem"</span></span><br></pre></td></tr></tbody></table></figure>

<p>更新</p>
<blockquote>
<p>注意，运行很慢，慢慢等，还有就是每次这样更新配置以后，直接访问网页可能502之类的，不用急，等会，多刷新几次就好了，不过第一次刷新也不行，看最后</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></tbody></table></figure>

<p>如果想看看配置有没有成功，这里看</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br></pre></td></tr></tbody></table></figure>

<h3 id="闭坑"><a href="#闭坑" class="headerlink" title="闭坑"></a>闭坑</h3><ul>
<li><p>配置以后没反应，看这个，特坑</p>
<p>  删除（<code>docker rm -f  gitlab</code>）以后再来一次，把刚才的80改成外部的的208，其他不要改</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d -p 208:208 -p 230:22 --name gitlab --restart always -v /home/data/docker/gitlab-ce/config:/etc/gitlab -v /home/data/docker/gitlab-ce/logs:/var/<span class="built_in">log</span>/gitlab -v /home/data/docker/gitlab-ce/data:/var/opt/gitlab gitlab/gitlab-ce:latest</span><br></pre></td></tr></tbody></table></figure>

<p>  记住，很慢，等会，可能好几分钟</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></tbody></table></figure>

<p>  大概这样的时候就好了，注意 <code>STATUS</code> ，一开始是 <code>(healthy starting)</code>，等会，等它变成 <code>(healthy)</code>，然后多刷新几次网页就好了，记住很慢，<code>等</code> 字诀</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                  PORTS                                                        NAMES</span><br><span class="line">a8d27b67f0d7        gitlab/gitlab-ce:latest   <span class="string">"/assets/wrapper"</span>        12 hours ago        Up 12 hours (healthy)   80/tcp, 443/tcp, 0.0.0.0:208-&gt;208/tcp, 0.0.0.0:230-&gt;22/tcp   gitlab</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置以后特别卡、或者内存占用高</p>
<p>  运行时，默认使用服务器核数+1，如果你的服务器核数特别多，就会很卡，占用内存很多</p>
<p>  因为我用了的服务器56个核心，所以我限制了一下<code>4</code>个，数据库和gitlab并发数都限制了8，16，以及数据库缓存也限制了。</p>
<p>  进入docker的gitlab</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<p>  编辑</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></tbody></table></figure>

<p>  添加如下，</p>
<blockquote>
<p>注意，新版的gitlab，用的是puma，nuicorn已经默认false了</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## 减少内存，且防止卡</span></span><br><span class="line">puma[<span class="string">'worker_processes'</span>] = 4</span><br><span class="line">puma[<span class="string">'per_worker_max_memory_mb'</span>] = 2048</span><br><span class="line">sidekiq[<span class="string">'concurrency'</span>] = 16</span><br><span class="line">postgresql[<span class="string">'shared_buffers'</span>] = <span class="string">"256MB"</span></span><br><span class="line">postgresql[<span class="string">'max_worker_processes'</span>] = 8</span><br></pre></td></tr></tbody></table></figure>

<p>  刷新配置</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></tbody></table></figure>

<p>  重启gitlab</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></tbody></table></figure>

<p>  等待几分钟以后刷新网页，否则502</p>
</li>
<li><p>备份</p>
<p>  进入docker的gitlab</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<p>  编辑</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></tbody></table></figure>

<p>  添加如下：3600*24*90天=7776000</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'backup_keep_time'</span>] = 7776000</span><br></pre></td></tr></tbody></table></figure>

<p>  刷新配置</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></tbody></table></figure>

<p>  重启gitlab</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></tbody></table></figure>

<p>  等待几分钟以后刷新网页，否则502</p>
<p>  退出docker，在系统中添加crontab</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 备份docker-gitlab</span></span><br><span class="line">* 4 * * * docker <span class="built_in">exec</span> gitlab gitlab-rake gitlab:backup:create</span><br></pre></td></tr></tbody></table></figure>

<p>  备份位置，之前外挂</p>
<p>  <code>-v /home/data/docker/gitlab-ce/data:/var/opt/gitlab</code></p>
<p>  所以在</p>
<p>  <code>/home/data/docker/gitlab-ce/data/backups</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器与SLURM的使用</title>
    <url>/2020/12/18/2020-12-18-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8ESLURM%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是服务器、slurm？"><a href="#什么是服务器、slurm？" class="headerlink" title="什么是服务器、slurm？"></a>什么是服务器、slurm？</h2><p>刚才才想起来，之前没接触过的可能还不知道什么是服务器、什么是slurm，先说一下什么</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>服务器你可以当做是好多好多台电脑，而这些电脑都在格致楼4039房间，自己的电脑跑程序太慢，就把程序放在4039的电脑上跑。</p>
<p>可是总不能大家天天去4039用电脑吧，如果能像于QQ远程一样，用自己的电脑就可以连接到4039的电脑上就好了，但是又要安全、快速，所以使用ssh加密连接。而且为了防止程序算到99%突然死机前功尽弃，4039的电脑不能关机，安装了更为稳定的 <code>Linux内核</code> 的 <code>centos7</code> 系统。并且在一楼配置了单独的电源，防止停电。</p>
<h3 id="Linux、CentOS"><a href="#Linux、CentOS" class="headerlink" title="Linux、CentOS"></a>Linux、CentOS</h3><p><code>Linux内核</code>是开源的，谁都可以拿来用，所以在Linux内核基础上做的系统有很多，<code>CentOS7</code> 就是其中一个，它和你平时用的windows10类似，更类似于苹果电脑，但是只有黑漆漆的<code>命令行</code>，若干若干年前电脑都是没有图形界面的，只有<code>命令行</code>，其实现在的电脑也都保留了命令行，linux系列或者苹果电脑，叫终端，windows10系统，在电脑左下角的是徽标处右键鼠标，点击 <code>Windows PowerShell</code>，就是它</p>
<p>但是服务器是为了用来计算的，很极端，只有命令行，这样占用资源少，连接速度快，而且其实习惯了有时候也更方便，在命令行里输入命令，理论上可以完成你通过鼠标键盘完成的所有操作。</p>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>无论你是用什么连接服务器的，他们几乎都是基于ssh，ssh可以理解为一种工具，或者加密协议，可以直接在命令行里连接服务器</p>
<p>服务器只有一套，为了让很多人用且互不干扰，是需要把大家分割开的。也就是给大家开账户，这时候会给你一个类似于下面的命令和一个 <code>密码</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -p 10022 yuh@210.26.51.241</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">ssh -p 10022 yuh@icpcs.lzu.edu.cn</span><br></pre></td></tr></tbody></table></figure>

<p>你在命令行里输入发给你的这个命令，会提示你输入密码（第一次要先输入yes，再输入密码），就登录到服务器了，这时候你可以修改密码。</p>
<p>可以服务器想象成一栋有很多房间的楼，其中，<code>210.26.51.241</code> （<code>IP地址</code>）是这栋楼的地址，其实你把他换成<code>icpcs.lzu.edu.cn</code>也是一样的，<code>10022</code>（<code>端口</code>）是这栋楼的大门，<code>yuh</code>（用户名）是你的门牌号，每个人都不一样，<code>密码</code> 是你家的钥匙，但是建议使用秘钥登录。因此，谁也看不到谁家里的东西，你的所有活动也仅限于家里。</p>
<p>linux类系统讲究所有东西都是文件，<code>\</code>代表最外层文件，大家的家都在<code>home</code>这个区域，文件路径也就是<code>\home</code>，<code>home</code>这里有很多人的家，自己的家名字是<code>yuh</code>，文件路径也就是<code>\home\yuh</code>，你虽然不能看别人家里的东西，但是你可以知道都有谁的家在这片区域，命令是<code>ls \home</code>，</p>
<p>那，<code>slurm</code>是什么呢？</p>
<h3 id="slurm"><a href="#slurm" class="headerlink" title="slurm"></a>slurm</h3><p>可以理解为这栋楼的物业，你要算什么程序，告诉他，他帮你完成，如果你告诉他之前他已经在忙别人的事情了，你的程序会被排队，等别人完成。</p>
<h3 id="为什么要用vscode和oh-my-zsh"><a href="#为什么要用vscode和oh-my-zsh" class="headerlink" title="为什么要用vscode和oh-my-zsh"></a>为什么要用vscode和oh-my-zsh</h3><p>因为大家已经被现在这些图形界面的系统“惯坏”，vscode让没有图形界面的服务器相当于有了图形界面，oh-my-zsh可以帮助你记住你输入过的命令，并且自动补全文件路径什么的。</p>
<ol>
<li>无需记忆各个服务器密码、ip地址，而且比密码更安全</li>
<li>无需学习vim，且vscode比vim更好用</li>
<li>可在本地修改、运行远程文件，并且自动补全、高亮</li>
<li>无需记忆太多linux命令，可自动补全、解压文件等</li>
</ol>
<p>mac、windows10、linux系统通用</p>
<h2 id="vscode远程连接服务器"><a href="#vscode远程连接服务器" class="headerlink" title="vscode远程连接服务器"></a>vscode远程连接服务器</h2><p>平时可以在终端下面使用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -p 端口号 用户名@服务器ip</span><br></pre></td></tr></tbody></table></figure>

<p>这里建议使用vscode，<a href="https://code.visualstudio.com/">点我下载vscode</a>，双击安装即可</p>
<blockquote>
<p>vscode是IDE的一种，即文本编辑器，微软开发维护，可扩展各种好用的插件，代码、终端不再黑白，官方支持中文界面</p>
</blockquote>
<h3 id="初始配置vscode"><a href="#初始配置vscode" class="headerlink" title="初始配置vscode"></a>初始配置vscode</h3><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>安装以后界面大概这样，这里已经汉化并且安装了插件</p>
<p><img src="/source/images/vscode/main.png" alt="图"></p>
<p>汉化，代码里很多直接英语翻译不太靠谱，可以使用微软官方的汉化插件汉化一下<br>点左侧四个方块的图标，然后如图搜索 <code>chinese</code>，第一个插件右下角 <code>安装(install)</code><br><img src="/source/images/vscode/vscode-chinese.png" alt="图"></p>
<h4 id="安装远程插件"><a href="#安装远程插件" class="headerlink" title="安装远程插件"></a>安装远程插件</h4><p>与汉化插件安装类似</p>
<p><img src="/source/images/vscode/vscode-ssh.png" alt="图"></p>
<h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><h4 id="免ip"><a href="#免ip" class="headerlink" title="免ip"></a>免ip</h4><p>好像需要重新打开vscode，点左侧 <code>电脑</code> 图标，如图，红色标记处，选择ssh<br><img src="/source/images/vscode/vscode-ssh-main.png" alt="图"></p>
<p>然后点击红色标记（螺丝），如图，选择第一个即可<br><img src="/source/images/vscode/vscode-ssh-set.png" alt="图"></p>
<p>删除弹出的文本内容，复制下面的，注意把 <code>yuhang</code> 改成你自己的用户名（一般为姓名全拼），粘贴过去，其实你把<code>210.26.51.241</code> 换成 <code>icpcs.lzu.edu.cn</code> 也是一样的</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 新服务器主节点，</span></span><br><span class="line"><span class="comment"># Host后面（注意空格）的名字随意，方便自己记忆即可，</span></span><br><span class="line"><span class="comment"># HostName 后面为服务器的ip地址或者域名，</span></span><br><span class="line"><span class="comment"># User 你自己在这台服务器上的用户名，一般是姓名全拼</span></span><br><span class="line"><span class="comment"># Port 服务器的端口号</span></span><br><span class="line">Host master</span><br><span class="line">    HostName 210.26.51.241</span><br><span class="line">    User yuhang</span><br><span class="line">    <span class="comment"># 建议你自己在这注释里写一下密码，不然免密码登录过一段你就忘了密码了。。。。</span></span><br><span class="line">    Port 10022</span><br><span class="line"></span><br><span class="line"><span class="comment"># newnewserver1，但是命名不要newserver1，防止与master上原有的名字冲突</span></span><br><span class="line">Host newserver_1</span><br><span class="line">    HostName 210.26.51.241</span><br><span class="line">    User yuhang</span><br><span class="line">    Port 10122</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你还可以添加更多，# 后面的都是注释不起作用</span></span><br></pre></td></tr></tbody></table></figure>

<p>好像需要重新打开vscode，点左侧 <code>电脑</code> 图标，如图，已经有你刚才添加的服务器了<br><img src="/source/images/vscode/vscode-ssh-set-ok.png" alt="图"></p>
<h4 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h4><p>ssh服务器就应该禁止密码登录，因为很不安全</p>
<p>如图打开vscode终端<br><img src="/source/images/vscode/vscode-open-terminal.png" alt="图"></p>
<ul>
<li><p>如图，在弹出来的终端里输入 <code>ssh-key-gen</code> ，三次回车键，生成本地密钥，</p>
</li>
<li><p>继续输入 <code>ssh master</code> 然后输入服务器的密码，先登录到服务器（第一次可能会让输入yes），在服务器终端输入 <code>ssh-key-gen</code>，三次回车键，生成服务器端的个人密钥，</p>
</li>
<li><p>继续输入 <code>ssh-copy-id master</code>，master 就是刚才我们配置的ssh服务器的名字。然而windows10里没这个命令（mac和linux没问题）。。。</p>
</li>
</ul>
<blockquote>
<p>windows ssh免密登录配置见这里：<a href="https://blog.csdn.net/qq_43901693/article/details/103700272">Windows 配置 ssh 免密登录</a>，这里不再写了</p>
</blockquote>
<p><img src="/source/images/vscode/vscode-terminal-ssh.png" alt="图"></p>
<h4 id="下载、修改文件"><a href="#下载、修改文件" class="headerlink" title="下载、修改文件"></a>下载、修改文件</h4><p>点击左侧 <code>电脑</code> 图标，点击你要登录的服务器，如果windows上免密码登陆配置的有问题，这时候你需要输入密码</p>
<p><img src="/source/images/vscode/vscode-ssh-go.png" alt="图"></p>
<p>成功以后，左下角会有你登录的服务器名字，这时候你点左上角第一个图标，可以打开服务器上的文件，如图，打开以后，在左侧资源管理器中，选中文件，右键可以下载文件到自己电脑，</p>
<p><img src="/source/images/vscode/vscode-ssh-go-master.png" alt="图"></p>
<p>修改文件：点击直接修改就可以，你也可以打开终vscode端，注意这时候你的所有操作都是在服务器上的，终端也是服务器的终端，编辑的文件也是服务器上的，右键可以直接运行（这是安装了vscode的<code>Code Runner</code>插件），也可以在终端里输入<code>code 文件路径</code>可以打开某个文件直接修改</p>
<p><img src="/source/images/vscode/vscode-ssh-go-master-1.png" alt="图"></p>
<h4 id="上传文件：electerm"><a href="#上传文件：electerm" class="headerlink" title="上传文件：electerm"></a>上传文件：electerm</h4><p>scp也可以，<a href="https://www.runoob.com/linux/linux-comm-scp.html">怎么用点我</a>，但是还是建议开源软件 <a href="https://electerm.github.io/electerm/">electerm，点我下载</a>，切记，不要百度一个软件就用！有风险，可能会让服务器中病毒！！</p>
<ul>
<li><p>而且electerm可以切换中文界面！！！！</p>
<p>  <img src="/source/images/vscode/vscode-electerm.png" alt="图"></p>
</li>
<li><p>还可以记住密码，如图设置</p>
<p>  <img src="/source/images/vscode/vscode-electerm-add.png" alt="图"></p>
</li>
<li><p>一点就连接了，分屏也没问题</p>
<p>  <img src="/source/images/vscode/vscode-electerm-test-ssh.png" alt="图"><br>  <img src="/source/images/vscode/vscode-electerm-test-ssh2.png" alt="图"><br>  <img src="/source/images/vscode/vscode-electerm-test-ssh4.png" alt="图"></p>
</li>
<li><p>可以上传、下载、甚至编辑文件（编辑文件还是推荐vscode）</p>
<p>  <img src="/source/images/vscode/vscode-electerm-test-ssh3.png" alt="图"></p>
</li>
</ul>
<h2 id="Linux初步使用"><a href="#Linux初步使用" class="headerlink" title="Linux初步使用"></a>Linux初步使用</h2><h3 id="先利其器：oh-my-zsh"><a href="#先利其器：oh-my-zsh" class="headerlink" title="先利其器：oh-my-zsh"></a>先利其器：oh-my-zsh</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>命令自动补全，高亮等等，可以百度  oh-my-zsh</p>
<h4 id="使用与配置"><a href="#使用与配置" class="headerlink" title="使用与配置"></a>使用与配置</h4><ul>
<li><p>安装oh-my-zsh：</p>
<p>  服务器上我应该是安装过zsh了，直接服务器终端输入，自己电脑上输入这个可能报错443，是因为墙的问题，终端代理需要单独配置，只是系统代理不行，我这个博客里写的有<code>终端代理配置</code></p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>安装插件</p>
<p>  直接复制到服务器终端里，回车</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-autosuggestions &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-completions</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置插件</p>
<p>  不要用vim了，vscode连接服务器，打开终端，终端输入<code>code ~/.zshrc</code><br>  直接编辑</p>
<p>  <img src="/source/images/vscode/vscode-ssh-zsh.png" alt="图"></p>
<p>  如下修改</p>
  <figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(git)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为，插件是干什么用的，可以百度一下</span></span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    extract</span><br><span class="line">    z</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-completions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p>  文件最后添加，注意最后一行修改为你自己的用户名（一般为姓名全拼）</p>
  <figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 快捷</span></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> lm=<span class="string">'ls -l --block-size=m'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> javac=<span class="string">"javac -J-Dfile.encoding=utf8"</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">"grep --color=auto"</span></span><br><span class="line"><span class="built_in">alias</span> -s html=subl   <span class="comment"># 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开</span></span><br><span class="line"><span class="built_in">alias</span> -s <span class="keyword">in</span>=code     <span class="comment"># 在命令行直接输入 ruby 文件，会在 TextMate 中打开</span></span><br><span class="line"><span class="built_in">alias</span> -s py=vi       <span class="comment"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></span><br><span class="line"><span class="built_in">alias</span> -s js=vi</span><br><span class="line"><span class="built_in">alias</span> -s c=vi</span><br><span class="line"><span class="built_in">alias</span> -s java=vi</span><br><span class="line"><span class="built_in">alias</span> -s txt=vi</span><br><span class="line"><span class="built_in">alias</span> -s gz=<span class="string">'tar -xzvf'</span></span><br><span class="line"><span class="built_in">alias</span> -s tgz=<span class="string">'tar -xzvf'</span></span><br><span class="line"><span class="built_in">alias</span> -s zip=<span class="string">'unzip'</span></span><br><span class="line"><span class="built_in">alias</span> -s bz2=<span class="string">'tar -xjvf'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/你的用户名/.local/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>  注意，要让它生效，复制到终端里，回车</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="常用linux命令"><a href="#常用linux命令" class="headerlink" title="常用linux命令"></a>常用linux命令</h3><blockquote>
<p>其实你已经基本上用不到了，因为一切（<code>新建|打开|编辑|删除文件、文件夹、文件</code>）都可以在vscode里操作，和在自己电脑上是一样的。。。</p>
</blockquote>
<p>常用命令</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 回到自己的家目录，~ 代表你自己的家目录，即 \home\你自己的用户名</span></span><br><span class="line"><span class="comment"># 普通用户只有这个目录你可以访问（添加文件、删除文件等）</span></span><br><span class="line"><span class="built_in">cd</span> ~ </span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">cd</span> --</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> 文件夹路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回刚才那个目录</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回之前之前那个目录，同理可以 -3</span></span><br><span class="line"><span class="built_in">cd</span> -2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录结构，这个命令管理员没有安装的话可能没有</span></span><br><span class="line">tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录下有哪些文件 ./ 指的是当前路径</span></span><br><span class="line">ls 路径</span><br><span class="line"><span class="comment">## 包含隐藏文件（.开头的)</span></span><br><span class="line">ls -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你按照我前面的配置了ohmyzsh，可以输入</span></span><br><span class="line"></span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">la</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑文件，深入学习很累，没vscode在终端里直接输入code好用</span></span><br><span class="line">vim 文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rm 文件名或文件名以及文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件夹</span></span><br><span class="line">rm -r 文件夹或文件夹名以及文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除</span></span><br><span class="line">rm -rf 文件夹或文件夹名以及文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line">mkdir 文件夹名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建空白文件</span></span><br><span class="line">touch 文件名</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="slurm提交任务"><a href="#slurm提交任务" class="headerlink" title="slurm提交任务"></a>slurm提交任务</h2><blockquote>
<p>注意！！！不要在登录的地方（master节点）运行你的程序，请使用slurm提交！！！</p>
</blockquote>
<p>我只列出来简单、常用的命令，更深入的可以百度slurm，或者看<a href="https://www.zybuluo.com/Yalei-SONG/note/1340438">师兄之前写的</a></p>
<h3 id="了解课题组的服务器"><a href="#了解课题组的服务器" class="headerlink" title="了解课题组的服务器"></a>了解课题组的服务器</h3><p>查看整个slurm的使用情况</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">sinfo-s</span><br></pre></td></tr></tbody></table></figure>

<p>你会看到这个</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">NODELISTPARTIT</span> AVAIL       STATE    MEMORY  ALLOCMEM  FREE_MEM   CPUS(A/I/O/T)</span><br><span class="line"> <span class="attribute">node1</span>  ptt<span class="number">1</span>    up       mixed   <span class="number">1031221</span>     <span class="number">71680</span>    <span class="number">635979</span>     <span class="number">6</span>/<span class="number">138</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node2</span>  ptt<span class="number">1</span>    up       mixed   <span class="number">1031221</span>    <span class="number">931840</span>    <span class="number">509399</span>     <span class="number">70</span>/<span class="number">74</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node3</span> ptt<span class="number">2</span>*    up       mixed    <span class="number">257125</span>     <span class="number">10240</span>    <span class="number">175912</span>     <span class="number">72</span>/<span class="number">72</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node4</span> ptt<span class="number">2</span>*    up       mixed    <span class="number">257125</span>     <span class="number">10240</span>    <span class="number">174097</span>     <span class="number">72</span>/<span class="number">72</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node5</span>  ptt<span class="number">3</span>    up   allocated    <span class="number">257125</span>     <span class="number">36000</span>      <span class="number">3689</span>     <span class="number">144</span>/<span class="number">0</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node6</span>  ptt<span class="number">3</span>    up       mixed    <span class="number">257125</span>     <span class="number">35500</span>       <span class="number">724</span>     <span class="number">142</span>/<span class="number">2</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node7</span>  ptt<span class="number">3</span>    up       mixed    <span class="number">257125</span>      <span class="number">5000</span>      <span class="number">5044</span>    <span class="number">20</span>/<span class="number">124</span>/<span class="number">0</span>/<span class="number">144</span></span><br><span class="line"> <span class="attribute">node8</span>  ptt<span class="number">3</span>    up        idle    <span class="number">257125</span>         <span class="number">0</span>      <span class="number">9559</span>     <span class="number">0</span>/<span class="number">144</span>/<span class="number">0</span>/<span class="number">144</span></span><br></pre></td></tr></tbody></table></figure>

<p>这里列出了各个节点更加详细的信息，总内存（MEMORY），可用内存（FREE_MEM），CPU负载（CPU_LO），各结点可用核心情况（占用/空闲/其它/总量）。</p>
<p>我们的这组服务器一共有9台机器，</p>
<ul>
<li>其中1台master，是用来登录的，不要在上面运行程序，即使是编译程序，也不要用所有的核心一起跑</li>
<li>另外8台是用来计算的，命名为 nodeX(即node1、node2、node3、node4、node5、node6、node7、node8)</li>
</ul>
<p>上面那个命令输出的可以看出</p>
<ul>
<li>node1、node2被划分在一起即 <code>ptt1</code></li>
<li>node3、node4被划分在一起即 <code>ptt2</code></li>
<li>node5、node6、node7、node8被划分在一起即 <code>ptt3</code></li>
</ul>
<p>大家平时需要看明白的是最后一列 <code>CPUS(A/I/O/T)</code>：核心情况（占用/空闲/其它/总量）<br>如果空闲为0，你提交在这里的程序排队m会等待别人计算完毕</p>
<p>这是之前王宜森师兄发的ppt，群里还有</p>
<table>
<thead>
<tr>
<th align="center">集群名</th>
<th align="center">核心数</th>
<th align="center">内存</th>
<th align="center">功能定位及排队规则</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ptt1 node[1,2]</td>
<td align="center">144</td>
<td align="center">2T</td>
<td align="center">大内存任务分区。运行单核内存大于4G的任务，鼓励提交耗时较短任务，限制每位用户耗时较长任务所占 核数比例。</td>
</tr>
<tr>
<td align="center">Ptt2 node[3,4]</td>
<td align="center">144</td>
<td align="center">512G</td>
<td align="center">小内存耗时长任务分区。主要运行单核内存小于4G 但耗时长于14天的任务，限制每位用户耗时较长任务 所占核数比例</td>
</tr>
<tr>
<td align="center">Ptt3 node[5-8]</td>
<td align="center">288</td>
<td align="center">1T</td>
<td align="center">小内存耗时短任务分区。主要运行单核内存小于4G 且耗时少于14天的任务，限制每位用户排队总核时。</td>
</tr>
</tbody></table>
<h3 id="提交程序"><a href="#提交程序" class="headerlink" title="提交程序"></a>提交程序</h3><figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">nohup srun -p ptt2 --mem=500M -c 4 matlab -r <span class="string">'main'</span> 1&gt;log.txt 2&gt;err.txt &amp;</span><br></pre></td></tr></tbody></table></figure>

<p>含义:</p>
<ul>
<li><p>执行程序的命令为 <code>matlab -r 'main'</code></p>
</li>
<li><p>程序提交到 <code>ptt2</code> 分区（无需指定节点，指定以后可能会导致排队时间增加），使用 <code>500M</code> 内存，<code>4</code> 个cpu核心，</p>
</li>
<li><p>程序输出的错误信息放在 <code>当前文件夹的err.txt</code> 文件里，正确信息输出到 <code>当前文件夹的log.txt</code> 文件里 </p>
</li>
<li><p><code>nohup</code>与最后的<code>&amp;</code>是为了让你关闭终端，程序仍然可以执行</p>
</li>
</ul>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查看所有人提交的程序，输入它，回车</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">squeue</span><br></pre></td></tr></tbody></table></figure>

<p>或</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">squeue-sq</span><br></pre></td></tr></tbody></table></figure>

<p>只看某个人的</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">squeue -u 把我改为那个人的用户名</span><br></pre></td></tr></tbody></table></figure>

<p>或</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">squeue-sq| grep 把我改为那个人的用户名</span><br></pre></td></tr></tbody></table></figure>

<p>输出类似如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)</span><br><span class="line">156980      ptt1   matlab chenzhen  R 6-18:36:05      1 node1</span><br><span class="line">156979      ptt1   matlab chenzhen  R 6-18:36:19      1 node2</span><br><span class="line">156978      ptt1   matlab chenzhen  R 6-18:36:34      1 node2</span><br><span class="line">156977      ptt1   matlab chenzhen  R 6-18:36:47      1 node2</span><br><span class="line">156976      ptt1   matlab chenzhen  R 6-18:37:02      1 node2</span><br><span class="line">156975      ptt1   matlab chenzhen  R 6-18:37:20      1 node2</span><br><span class="line">156974      ptt1   matlab chenzhen  R 6-18:37:39      1 node2</span><br><span class="line">156973      ptt1   matlab chenzhen  R 6-18:38:08      1 node2</span><br><span class="line">156964      ptt1   matlab chenzhen  R 6-20:54:36      1 node2</span><br><span class="line">156963      ptt1   matlab chenzhen  R 6-20:54:58      1 node2</span><br><span class="line">156962      ptt1   matlab chenzhen  R 6-21:05:47      1 node2</span><br><span class="line">156961      ptt1   matlab chenzhen  R 6-21:06:03      1 node2</span><br><span class="line">156960      ptt1   matlab chenzhen  R 6-21:06:17      1 node2</span><br><span class="line">156959      ptt1   matlab chenzhen  R 6-21:06:35      1 node2</span><br><span class="line">156958      ptt1   matlab chenzhen  R 6-21:07:26      1 node2</span><br></pre></td></tr></tbody></table></figure>

<p>查看其他节点程序运行情况，比如看节点1</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">topn 1</span><br></pre></td></tr></tbody></table></figure>

<h3 id="取消某个程序"><a href="#取消某个程序" class="headerlink" title="取消某个程序"></a>取消某个程序</h3><p><code>提交的程序id</code>，即前面查看的时候第一个数字(JOBID)</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line">scancel 提交的程序id</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>slurm</tag>
        <tag>linux命令入门</tag>
        <tag>linux环境变量</tag>
        <tag>vscode使用</tag>
      </tags>
  </entry>
  <entry>
    <title>python模拟点击实现自动登录校园网</title>
    <url>/2020/12/18/2020-12-18-python%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E6%A0%A1%E5%9B%AD%E7%BD%91/</url>
    <content><![CDATA[<h2 id="校园网自动登录"><a href="#校园网自动登录" class="headerlink" title="校园网自动登录"></a>校园网自动登录</h2><blockquote>
<p>免责说明：类似于浏览器直接登录，无恶意代码，仅限于学习，可用于自习室长时间不关机的电脑，防止登录失效，请勿恶意使用</p>
</blockquote>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提:"></a>前提:</h2><h3 id="安装-依赖"><a href="#安装-依赖" class="headerlink" title="安装 依赖"></a>安装 依赖</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>


<h3 id="下载浏览器驱动"><a href="#下载浏览器驱动" class="headerlink" title="下载浏览器驱动"></a>下载浏览器驱动</h3><blockquote>
<p>对照自己电脑安装的浏览器和对应的版本，下载解压后，将所在的目录添加系统的 <code>环境变量</code> 中。</p>
</blockquote>
<ul>
<li>推荐火狐浏览器驱动，其 <a href="https://github.com/mozilla/geckodriver/releases">下载地址</a></li>
<li>谷歌浏览器驱动，其 <a href="http://chromedriver.storage.googleapis.com/index.html">下载地址</a></li>
</ul>
<p>安装浏览器，建议火狐配火狐驱动，不用管版本问题</p>
<h2 id="配置和使用"><a href="#配置和使用" class="headerlink" title="配置和使用"></a>配置和使用</h2><h3 id="配置自己的邮箱和账号"><a href="#配置自己的邮箱和账号" class="headerlink" title="配置自己的邮箱和账号"></a>配置自己的邮箱和账号</h3><p>在这个文件中配置: <a href="./config.py">config.py</a></p>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><h4 id="方法一-使用系统定时任务"><a href="#方法一-使用系统定时任务" class="headerlink" title="方法一:使用系统定时任务"></a>方法一:使用系统定时任务</h4><p>我的这个项目放在了 <code>/home/yuh/gitFile</code> 下面</p>
<blockquote>
<p>linux系统中可以用cron,wsl中注意开机自启wsl的cron</p>
</blockquote>
<ul>
<li>自己修改 <a href="./authentication_new.sh">authentication_new.sh</a> 文件的目录，打开文件所在目录，然后使用python3运行</li>
</ul>
<p>示例如下,按照自己的路径和配置修改,我这里用的是zsh</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">python3 /home/yuh/gitFile/loginLzuNet/authentication_new.py</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">*/2 * * * * /home/yuh/gitFile/loginLzuNet/file/authentication_new.sh</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>ps:wsl中开机cron和ssh<blockquote>
<p>如果是ubuntu系统,如下:<a href="./startubuntu.vbs">startubuntu.vbs</a></p>
</blockquote>
<figure class="highlight vbs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> ws = WScript.<span class="built_in">CreateObject</span>(<span class="string">"WScript.Shell"</span>)</span><br><span class="line">ws.run <span class="string">"wsl -d ubuntu -u root /etc/init.wsl start"</span>, vbhide</span><br></pre></td></tr></tbody></table></figure>
sudo chmod 777 /etc/init.wsl<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Filename: /etc/init.wsl</span></span><br><span class="line"><span class="comment"># Usage: sudo /etc/init.wsl [start|stop|restart]</span></span><br><span class="line">/etc/init.d/cron <span class="variable">$1</span></span><br><span class="line">/etc/init.d/ssh <span class="variable">$1</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="方法二-使用python-BlockingScheduler"><a href="#方法二-使用python-BlockingScheduler" class="headerlink" title="方法二:使用python:BlockingScheduler"></a>方法二:使用python:BlockingScheduler</h4><blockquote>
<p>需要<a href="./authentication_new.py">authentication_new.py</a>程序开机自启,并且一直运行在后台</p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">scheduler = BlockingScheduler()</span><br><span class="line"><span class="comment"># 添加任务并设置触发方式为s</span></span><br><span class="line">scheduler.add_job(main, <span class="string">'interval'</span>, seconds=<span class="number">120</span>)  <span class="comment">#2分钟检查一次ip</span></span><br><span class="line"><span class="comment">#开始运行调度器</span></span><br><span class="line">scheduler.start()</span><br></pre></td></tr></tbody></table></figure>



<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>下载的驱动必须放在环境路径里</li>
<li>驱动必须有可执行权限（linux系统）</li>
<li><a href="file/authentication_new.sh">authentication_new.sh</a>、<a href="file/init.wsl">init.wsl</a> 必须有可执行权限（linux系统）</li>
<li>wsl中,必须开机启动wsl的定时任务</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-selenium模拟点击</tag>
        <tag>python邮件发送</tag>
        <tag>linux定时任务</tag>
        <tag>WSL2</tag>
        <tag>windows开机自启WSL相关程序</tag>
      </tags>
  </entry>
  <entry>
    <title>python抓包 - 斗罗大陆</title>
    <url>/2020/12/07/2020-12-7-python%E6%8A%93%E5%8C%85%E7%BB%83%E4%B9%A0%EF%BC%9A%E6%96%97%E7%BD%97%E5%A4%A7%E9%99%86/</url>
    <content><![CDATA[<p>导出依赖库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip3 install pipreqs</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></tbody></table></figure>

<p>依赖库 requirements.txt</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">requests==2.22.0</span><br><span class="line">beautifulsoup4==4.9.3</span><br><span class="line">lxml==4.6.2</span><br></pre></td></tr></tbody></table></figure>

<p>安装依赖库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">url_home = <span class="built_in">input</span>(<span class="string">"输入微信分享链接：\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(url_home) == <span class="number">0</span>:</span><br><span class="line">    url_home = <span class="string">"https://mp.weixin.qq.com/mp/homepage?__biz=MzIwMTg2NzU4Mw==&amp;hid=7&amp;sn=1c695b09eb9d38150286cc25855392d9&amp;scene=1"</span></span><br><span class="line">    print(<span class="string">"使用默认链接："</span> + url_home + <span class="string">"\n\n"</span>)</span><br><span class="line"></span><br><span class="line">ads = [<span class="string">"点下広吿再走丨助小视能量满满~"</span>, <span class="string">"点击上方蓝字,关注斗罗最新动态！"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = <span class="string">"斗罗大陆"</span></span><br><span class="line">s = session.get(url_home)</span><br><span class="line">title = BeautifulSoup(s.text, features=<span class="string">"lxml"</span>).get_text().strip().replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line">print(title + <span class="string">"\n\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">query = <span class="built_in">dict</span>(urllib.parse.parse_qsl(urllib.parse.urlsplit(url_home).query))</span><br><span class="line"></span><br><span class="line">__biz = query[<span class="string">"__biz"</span>]</span><br><span class="line">hid = query[<span class="string">"hid"</span>]</span><br><span class="line">sn = query[<span class="string">"sn"</span>]</span><br><span class="line">scene = query[<span class="string">"scene"</span>]</span><br><span class="line"></span><br><span class="line">cids = <span class="number">6</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(title + <span class="string">".txt"</span>, <span class="string">"w+"</span>) <span class="keyword">as</span> file:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cid <span class="keyword">in</span> <span class="built_in">range</span>(cids):</span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">"__biz"</span>: __biz,</span><br><span class="line">            <span class="string">"hid"</span>: hid,</span><br><span class="line">            <span class="string">"sn"</span>: sn,</span><br><span class="line">            <span class="string">"scene"</span>: scene,</span><br><span class="line">            <span class="string">"cid"</span>: cid,</span><br><span class="line">            <span class="string">"begin"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"count"</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="string">"action"</span>: <span class="string">"appmsg_list"</span>,</span><br><span class="line">            <span class="string">"f"</span>: <span class="string">"json"</span>,</span><br><span class="line">            <span class="string">"r"</span>: <span class="number">0.27656332194465394</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        url = <span class="string">"https://mp.weixin.qq.com/mp/homepage"</span></span><br><span class="line">        res = session.post(url, data=data)</span><br><span class="line">        json1 = json.loads(res.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> zhangjie <span class="keyword">in</span> json1[<span class="string">"appmsg_list"</span>]:</span><br><span class="line">            chapter = zhangjie[<span class="string">"title"</span>]</span><br><span class="line">            content = <span class="string">""</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                soup0 = BeautifulSoup(session.get(zhangjie[<span class="string">"link"</span>]).text, features=<span class="string">"lxml"</span>)</span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> soup0.select(<span class="string">"#js_content"</span>)[<span class="number">0</span>].select(<span class="string">"p"</span>):</span><br><span class="line">                    content = content + <span class="string">"    "</span> + p.get_text().strip().replace(</span><br><span class="line">                        <span class="string">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</span>, <span class="string">"\n"</span>) + <span class="string">"\n"</span></span><br><span class="line">                print(chapter + <span class="string">"：\n        "</span> + content.replace(<span class="string">"\n"</span>, <span class="string">""</span>).strip()[<span class="number">0</span>: <span class="number">50</span>] + <span class="string">"……\n"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                content = <span class="string">"本章节抓取错误，无内容"</span></span><br><span class="line">                print(chapter + <span class="string">"：\n        "</span> + content)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> ad <span class="keyword">in</span> ads:</span><br><span class="line">                content = content.replace(ad,<span class="string">""</span>)</span><br><span class="line">            file.write(chapter + <span class="string">"\n\n"</span> + content + <span class="string">"\n\n"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>windows终端</tag>
        <tag>clash</tag>
        <tag>python抓包</tag>
        <tag>斗罗大陆</tag>
      </tags>
  </entry>
  <entry>
    <title>终端代理设置</title>
    <url>/2020/12/02/2020-12-2-%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>先安装代理，代理用的clash，windows用clash for windows，mac建议clash</p>
<blockquote>
<p>wsl2和mac里面我用的都是 <code>oh-my-zhs</code>，在 <code>~/.zshrc</code> 后面添加，如果使用终端还不懂环境变量就不要往下看了，先百度各个系统的环境变量怎么设置</p>
</blockquote>
<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>v2rayn导致wsl2下的vscode无法预览markdown</p>
<p>并且代理会导致微软应用市场无法联网，clash for windows解决了这个问题，打开面板 </p>
<figure class="highlight mathematica"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">General</span> <span class="operator">-</span> <span class="variable">UWP</span> <span class="built_in">Loopback</span></span><br></pre></td></tr></tbody></table></figure>

<p>选中微软市场，保存即可</p>
<h2 id="powershell终端"><a href="#powershell终端" class="headerlink" title="powershell终端"></a>powershell终端</h2><p>系统变量添加两个</p>
<p>名字：http_proxy、参数：<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a><br>名字：https_proxy、参数：<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a></p>
<h3 id="wsl2终端"><a href="#wsl2终端" class="headerlink" title="wsl2终端"></a>wsl2终端</h3><p>wsl2设置代理以后必须设置 允许局域网的连接</p>
<p>打开面板 General - Allow LAN</p>
<p>设置环境变量</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="comment"># 获取主机 IP  保存在 /etc/resolv.conf 中</span></span><br><span class="line"><span class="built_in">export</span> hostip=$(cat /etc/resolv.conf |grep -oP <span class="string">'(?&lt;=nameserver\ ).*'</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() {</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">"http://<span class="variable">${hostip}</span>:7890"</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">"http://<span class="variable">${hostip}</span>:7890"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>(){</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></tbody></table></figure>

<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>代理用的clash、设置环境变量</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() {</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>(){</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>mac终端</tag>
        <tag>windows终端</tag>
        <tag>clash</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal美化配置</title>
    <url>/2020/11/28/2020-11-28-Windows%20Terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>微软应用市场里直接安装就行，我是用的[scoop安装配置]，在归档里找</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scoop install windows-terminal</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>最新版1.8中，点击设置，是图形界面，想找到json数据，点左下角<code>打开JSON文件</code>。</p>
</blockquote>
<h2 id="默认打开"><a href="#默认打开" class="headerlink" title="默认打开"></a>默认打开</h2><p>打开WSL的某一个还是windows</p>
<p>修改 <code>defaultProfile</code>，修改为 <code>profiles - list</code> 中其中一个的 <code>guid</code>（需要哪个用哪个，根据 <code>name</code> 判断）</p>
<h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>在这里下载：<a href="https://github.com/microsoft/cascadia-code">cascadia-code</a>，<code>releases</code> 里下载，解压以后双击安装 <code>ttf/CascadiaCode.ttf</code> 这个文件</p>
<p>windows-terminal右上角设置</p>
<h2 id="颜色主题"><a href="#颜色主题" class="headerlink" title="颜色主题"></a>颜色主题</h2><p>颜色主题到这里找 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">iTerm2-Color-Schemes</a>，随便点开一个自己熟悉的 <code>.json</code> 文件，类似下面的内容，复制，然后在 <code>schemes</code> 上括号下面添加</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Monokai Soda"</span>,</span><br><span class="line">    <span class="string">"black"</span>: <span class="string">"#1a1a1a"</span>,</span><br><span class="line">    <span class="string">"red"</span>: <span class="string">"#f4005f"</span>,</span><br><span class="line">    <span class="string">"green"</span>: <span class="string">"#98e024"</span>,</span><br><span class="line">    <span class="string">"yellow"</span>: <span class="string">"#fa8419"</span>,</span><br><span class="line">    <span class="string">"blue"</span>: <span class="string">"#9d65ff"</span>,</span><br><span class="line">    <span class="string">"purple"</span>: <span class="string">"#f4005f"</span>,</span><br><span class="line">    <span class="string">"cyan"</span>: <span class="string">"#58d1eb"</span>,</span><br><span class="line">    <span class="string">"white"</span>: <span class="string">"#c4c5b5"</span>,</span><br><span class="line">    <span class="string">"brightBlack"</span>: <span class="string">"#625e4c"</span>,</span><br><span class="line">    <span class="string">"brightRed"</span>: <span class="string">"#f4005f"</span>,</span><br><span class="line">    <span class="string">"brightGreen"</span>: <span class="string">"#98e024"</span>,</span><br><span class="line">    <span class="string">"brightYellow"</span>: <span class="string">"#e0d561"</span>,</span><br><span class="line">    <span class="string">"brightBlue"</span>: <span class="string">"#9d65ff"</span>,</span><br><span class="line">    <span class="string">"brightPurple"</span>: <span class="string">"#f4005f"</span>,</span><br><span class="line">    <span class="string">"brightCyan"</span>: <span class="string">"#58d1eb"</span>,</span><br><span class="line">    <span class="string">"brightWhite"</span>: <span class="string">"#f6f6ef"</span>,</span><br><span class="line">    <span class="string">"background"</span>: <span class="string">"#1a1a1a"</span>,</span><br><span class="line">    <span class="string">"foreground"</span>: <span class="string">"#c4c5b5"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>在 <code>defaults</code> 上括号下面添加</p>
<ul>
<li>注意字体：<code>fontFace</code></li>
<li>注意图片地址：<code>backgroundImage</code></li>
<li>注意：<code>colorScheme</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"fontFace"</span>: <span class="string">"Cascadia Code"</span>, // 字体</span><br><span class="line"><span class="string">"fontSize"</span>: 12, // 字号</span><br><span class="line"><span class="string">"acrylicOpacity"</span>: 0.6, // 透明度</span><br><span class="line"><span class="string">"colorScheme"</span>: <span class="string">"Monokai Soda"</span>, //颜色主题名称, 就是schemes下面的每个实例的 name 值</span><br><span class="line"><span class="string">"closeOnExit"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"cursorColor"</span>: <span class="string">"#ffffff"</span>, //光标颜色</span><br><span class="line"><span class="string">"cursorShape"</span>: <span class="string">"emptyBox"</span>, //光标类型  可选 bar | vintage | underscore | filledBox | emptyBox</span><br><span class="line"><span class="string">"historySize"</span>: 9999999,</span><br><span class="line"><span class="string">"backgroundImage"</span>: <span class="string">"D:\\Users\\yuh\\scoop\\apps\\windows-terminal\\current\\Images\\img3.jpg"</span>, //配置背景图片地址</span><br><span class="line"><span class="string">"backgroundImageOpacity"</span>: 0.25, //背景图片的透明度</span><br><span class="line"><span class="string">"padding"</span>: <span class="string">"0, 0, 0, 0"</span>,</span><br><span class="line"><span class="string">"snapOnInput"</span>: <span class="literal">true</span>,</span><br><span class="line">//默认打开文件夹，如果是linux系统，可以设置为 <span class="string">"//wsl$/Ubuntu-20.04/home/yuh"</span>,</span><br><span class="line"><span class="string">"startingDirectory"</span>: <span class="string">"%USERPROFILE%"</span>,</span><br><span class="line"><span class="string">"useAcrylic"</span>: <span class="literal">false</span>, //是否开启毛玻璃特效，值为<span class="literal">false</span>的时候就没有毛玻璃特效</span><br><span class="line"><span class="string">"tabTitle"</span>: <span class="string">"chessYu"</span> //标签名称</span><br></pre></td></tr></tbody></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://juejin.cn/post/6844904116322304014">Windows Terminal美化界面</a></li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>cascadia-code字体</tag>
        <tag>iTerm2-Color-Schemes</tag>
      </tags>
  </entry>
  <entry>
    <title>windows包管理scoop配置使用</title>
    <url>/2020/11/28/2020-11-28-windows%E5%8C%85%E7%AE%A1%E7%90%86scoop%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="windows10可能禁止脚本运行"><a href="#windows10可能禁止脚本运行" class="headerlink" title="windows10可能禁止脚本运行"></a>windows10可能禁止脚本运行</h2><p>打开终端，提示 “无法加载文件C:\XXX\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本” 的错误…</p>
<ul>
<li><code>管理员权限</code> 打开PowerShell</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></tbody></table></figure>

<h2 id="下载scoop"><a href="#下载scoop" class="headerlink" title="下载scoop"></a>下载scoop</h2><p>一会git用scoop下载，所以现在直接下载这个开源库。</p>
<p>在这里下载：<a href="https://github.com/lukesampson/scoop">scoop</a>的zip文件，解压到一个目录，以后安装的软件都在这个目录，所以不建议在C盘，不要中文路径</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li><p>windows10设置里，搜索 <code>环境变量</code>，选择 <code>编辑系统环境变量</code>，</p>
<p>  <img src="/source/images/2020-11-28-12-00-55.png" alt="环境变量"></p>
</li>
<li><p>选择右下角<code>环境变量</code>，</p>
<p>  <img src="/source/images/2020-11-28-12-01-23.png" alt="图"></p>
</li>
<li><p>选择 下面系统环境变量里的Path</p>
<p>  <img src="/source/images/2020-11-28-12-02-19.png" alt="图"></p>
</li>
<li><p>使用浏览</p>
<p>  <img src="/source/images/2020-11-28-12-04-07.png" alt="图"></p>
</li>
<li><p>选择安装目录的 <code>skims</code></p>
<p>  <img src="/source/images/2020-11-28-12-05-24.png" alt="图"></p>
</li>
</ul>
<h2 id="修改两个路径"><a href="#修改两个路径" class="headerlink" title="修改两个路径"></a>修改两个路径</h2><p>我的scoop放在了</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP_GLOBAL'</span>,<span class="string">'D:\Users\yuh\scoop'</span>,<span class="string">'Machine'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="variable">$env</span>:SCOOP_GLOBAL=<span class="string">'D:\Users\yuh\scoop'</span></span><br><span class="line"></span><br><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP'</span>,<span class="string">'D:\Users\yuh\scoop'</span>,<span class="string">'User'</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$env</span>:SCOOP=<span class="string">'D:\Users\yuh\scoop'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h2><ul>
<li><p>添加更多软件源</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scoop bucket add 源的名字</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>查看安装了哪些</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">scoop bucket list</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>我安装了这些</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dodorz</span><br><span class="line">dorado</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">extras</span><br><span class="line">java</span><br><span class="line">jetbrains</span><br><span class="line">main</span><br><span class="line">scoopbucket</span><br><span class="line">scoopet</span><br><span class="line">versions</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows包管理</tag>
        <tag>scoop</tag>
        <tag>环境变量配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统源码编译安装LAMMPS</title>
    <url>/2020/11/25/2020-11-25-Ubuntu%E7%B3%BB%E7%BB%9Flammps%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>官网很详细，也可以去github提问，作者回复很不错</p>
<p>如果不知道git，百度</p>
<blockquote>
<p>github很慢，建议第二个</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lammps/lammps.git</span><br></pre></td></tr></tbody></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/yuhldr/lammps.git</span><br></pre></td></tr></tbody></table></figure>

<p>防止污染</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> lammps &amp;&amp; mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></tbody></table></figure>

<p>暂时不配置GPU，先占位</p>
<p>需要哪些包自己加。我只用PKG_MANYBODY和BUILD_OMP</p>
<p>官方文档很详细 <a href="https://lammps.sandia.gov/doc/Build_cmake.html">官方文档</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cmake -D PKG_MANYBODY=yes -D BUILD_OMP=yes  -D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on -D PKG_PYTHON=on ../cmake</span><br></pre></td></tr></tbody></table></figure>

<p>如果 make -j 4会用4个核心编译，如果make -j使用所有cpu，容易卡住</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cmake --build . -j5</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cmake --install .</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>物理</category>
        <category>科研工具</category>
      </categories>
      <tags>
        <tag>源码安装</tag>
        <tag>LAMMPS</tag>
        <tag>cmake</tag>
        <tag>GPU</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2安装配置</title>
    <url>/2020/11/18/2020-11-18-WSL2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装启用WSL2"><a href="#安装启用WSL2" class="headerlink" title="安装启用WSL2"></a>安装启用WSL2</h2><blockquote>
<p>官网写的很详细，<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">可以去看看，中文的</a></p>
</blockquote>
<ol>
<li><p>确保电脑最新版</p>
<p>version 1903 or higher, with Build 18362 or higher.</p>
</li>
<li><p>启用虚拟机平台和 Linux 子系统功能</p>
<ul>
<li><p>以管理员权限启动 PowerShell，然后输入以下命令启用虚拟机平台：</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>以管理员权限启动 PowerShell，然后输入以下命令启用 Linux 子系统功能：</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><p>安装linux内核</p>
<blockquote>
<p>可能要重启电脑</p>
</blockquote>
<p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">点我下载：WSL2 Linux kernel update package for x64 machines</a></p>
</li>
<li><p>设置WSL2</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></tbody></table></figure>

<p> 查看版本</p>
 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>下载安装</p>
<p> 在自带的应用商店下载，搜索ubuntu，点击安装即可</p>
</li>
<li><p>启动ubuntu，设置用户名和密码</p>
<p>可能会遇到各种报错，比如boot没有开启虚拟机、比如C盘太小，文件被压缩了，等等，根据错误码，去看<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">官网，中文的</a>，滑到最后</p>
</li>
</ol>
<h2 id="配置oh-my-zsh"><a href="#配置oh-my-zsh" class="headerlink" title="配置oh-my-zsh"></a>配置oh-my-zsh</h2><blockquote>
<p>不要再用bash了……，安装 <code>zsh</code> 和 <code>oh-my-zsh</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install zsh &amp;&amp; sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>

<p>可能会有这个报错，方法一：</p>
<ul>
<li>需要代理，懂吧，这里不方便细说，而且及时使用了代理，终端也要配置代理，看我2020-12-2发的帖子</li>
<li>也可以自己在浏览器或者其他地方打开这个 <a href="https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh">安装脚本</a> 的网址，然后把内容保存起来，命名 <code>install.sh</code> 放在WSL的一个目录里，你在那个目录里输入 <code>sh install.sh</code>，运行这个安装脚本就可以了</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection reset by peer <span class="keyword">in</span> connection to raw.github.com:443 </span><br></pre></td></tr></tbody></table></figure>

<p>三个插件：自动补全、高亮、建议 <code>zsh-syntax-highlighting</code> <code>zsh-autosuggestions</code> <code>zsh-completions</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-autosuggestions &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-completions</span><br></pre></td></tr></tbody></table></figure>

<p>编辑配置 <code>zsh</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<p>在最后添加如下内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 快捷</span></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> lm=<span class="string">'ls -l --block-size=m'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/sbin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></tbody></table></figure>

<p>修改这一行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></tbody></table></figure>

<p>替换修改为，用vim就行，其他也可，看自己习惯</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    extract</span><br><span class="line">    z</span><br><span class="line">    sublime</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-completions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p>生效</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ul>
<li><p>备份</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>删除之前的内容，修改为以下内容</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>更新</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><ul>
<li><p>卸载重装</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt remove openssh-client openssh-server &amp;&amp; sudo apt install openssh-client openssh-server</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>备份原始的 <code>sshd_config</code> 和 <code>ssh_config</code></p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak &amp;&amp; sudo cp /etc/ssh/ssh_config /etc/ssh/ssh_config.bak</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>编辑 <code>sshd_config</code></p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Port 3008</span><br><span class="line">PermitRootLogin no           <span class="comment"># 如果你需要用 root 直接登录系统则此处改为 yes</span></span><br><span class="line">PasswordAuthentication yes    <span class="comment"># 将 no 改为 yes 表示使用帐号密码方式登录</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>启动 <code>ssh</code>，查看 <code>status</code>，注意这里不能用 <code>systemctl</code></p>
<blockquote>
<p>启动SSH服务</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>检查状态</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo service ssh status</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>对于wsl2</p>
<blockquote>
<p>注意！！！wsl2与windows10的ip不完全一样，<a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">官网看这里</a></p>
</blockquote>
<p>  在wsl2里面运行，安装net-tools并显示ip，eth0:那一个ip</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install net-tools -y &amp;&amp; ifconfig</span><br></pre></td></tr></tbody></table></figure>

<p>  在windows的powershell（管理员权限）里面监听并转发端口</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=3008 listenaddress=0.0.0.0 connectport=3008 connectaddress=这里是wsl2的ip</span><br></pre></td></tr></tbody></table></figure>

<p>  如果需要：</p>
<blockquote>
<p>查看这些转发端口</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>删除这些转发端口</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=3008  listenaddress=0.0.0.0</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>防火墙</p>
<p>  新建防火墙端口规则，安装火绒等管家，windows10安全中心无法点击，请到<br>  <code>控制面板\系统和安全\Windows Defender 防火墙</code>，左侧<code>高级设置</code>，<code>入站规则</code>，端口设置其余默认即可</p>
</li>
</ul>
<h2 id="开机自启：ssh-和-cron"><a href="#开机自启：ssh-和-cron" class="headerlink" title="开机自启：ssh 和 cron"></a>开机自启：ssh 和 cron</h2><ul>
<li><p>wsl中添加脚本</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi /etc/init.wsl</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Filename: /etc/init.wsl</span></span><br><span class="line"><span class="comment"># Usage: sudo /etc/init.wsl [start|stop|restart]</span></span><br><span class="line">/etc/init.d/cron <span class="variable">$1</span></span><br><span class="line">/etc/init.d/ssh <span class="variable">$1</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意可执行权限</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo chmod 777 /etc/init.wsl</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>windows开机启动</p>
<blockquote>
<p>进入自启目录（ctrl R）</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">shell:startup</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>新建文件startubuntu.vbs</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Set ws = CreateObject(<span class="string">"WScript.Shell"</span>)</span><br><span class="line">ws.run <span class="string">"wsl -d ubuntu  -u root /etc/init.wsl start"</span>, vbhide</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="防止windows环境变量污染"><a href="#防止windows环境变量污染" class="headerlink" title="防止windows环境变量污染"></a>防止windows环境变量污染</h2><ul>
<li><p>wsl中添加脚本</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi /etc/wsl.conf</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 不加载Windows中的PATH内容</span></span><br><span class="line">[interop]</span><br><span class="line">appendWindowsPath = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动挂载Windows系统所有磁盘分区，默认就是true</span></span><br><span class="line">[automount]</span><br><span class="line">enabled = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><blockquote>
<p>cron已经在前面的开机自启中自启</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">*/2 * * * * . /root/.zshrc;/root/admin/loginLzuNet/file/authentication_new.sh</span><br></pre></td></tr></tbody></table></figure>

<p><code>. /root/.zshrc;</code> 添加环境变量，尤其是root里面，如果是普通用户，修改对应目录 <code>. /home/用户名/.zshrc;</code></p>
<p>上面这样设置环境变量，有些电脑上好像不对，可以如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">*/2 * * * * /root/admin/loginLzuNet/file/authentication_new.sh</span><br></pre></td></tr></tbody></table></figure>

<p>注意着脚本，777权限，以及<code>/bin/zsh</code>，并且环境变量放在这个脚本里</p>
<figure class="highlight zsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"><span class="built_in">source</span> /root/.zshrc</span><br><span class="line">/opt/anaconda3/bin/python /root/admin/loginLzuNet/authentication_new.py</span><br></pre></td></tr></tbody></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置安装nextcloud</title>
    <url>/2020/11/09/2020-11-09-docker%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85nextcloud/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>进入root用户进行操作</p>

</blockquote>

<h2 id="docker安装配置"><a href="#docker安装配置" class="headerlink" title="docker安装配置"></a>docker安装配置</h2><ul>
<li><p>centos7系统，先安装docker</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install docker -y</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>开启docker、开机自启</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>修改docker路径</p>
<blockquote>
<p>尽量把docker放置在其他目录，这样就不用修改nextcloud的目录了，这里使用软连接<br>  如果你开启了docker，停止它</p>
</blockquote>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></tbody></table></figure>

<p>  如果你准备把docker放在/home/data</p>
<p>  将默认路径的文件移动到这里</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mv /var/lib/docker/ /home/data</span><br></pre></td></tr></tbody></table></figure>

<p>  然后创建软链接</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /home/data/docker /var/lib/docker</span><br></pre></td></tr></tbody></table></figure>

<p>  开启</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></tbody></table></figure>

<p>  查看</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="配置docker可视化-可选"><a href="#配置docker可视化-可选" class="headerlink" title="配置docker可视化(可选)"></a>配置docker可视化(可选)</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker run -p 9000:9000 --name prtainer --restart=always  -v /var/run/docker.sock:/var/run/docker.sock -d portainer/portainer</span><br></pre></td></tr></tbody></table></figure>

<h2 id="docker初步使用"><a href="#docker初步使用" class="headerlink" title="docker初步使用"></a>docker初步使用</h2><ul>
<li><p>查看docker安装了那些软件</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>全部配置完成以后大概这样</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">CONTAINER ID  IMAGE                COMMAND                 CREATED      STATUS       PORTS                               NAMES</span><br><span class="line">62f9f2f1d55a  nextcloud            <span class="string">"/entrypoint.sh ap..."</span>  3 weeks ago  Up 2 weeks   0.0.0.0:80-&gt;80/tcp                  nextcloud</span><br><span class="line">ec43a5255a01  mysql                <span class="string">"docker-entrypoint..."</span>  3 weeks ago  Up 3 weeks   33060/tcp, 0.0.0.0:33306-&gt;3306/tcp  nextcloud_db</span><br><span class="line">f65c0ab8e2ba  portainer/portainer  <span class="string">"/portainer"</span>            3 weeks ago  Up 3 weeks   0.0.0.0:9000-&gt;9000/tcp              prtainer</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>强制删除某个coker软件（即使它在运行）</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker rm -f 这里是CONTAINER ID 或者 NAMES</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>开始某个coker软件</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker start 这里是CONTAINER ID 或者 NAMES</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>停止某个docker软件</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker stop 这里是CONTAINER ID 或者 NAMES</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h2><ul>
<li><p>mysql密码12345678，端口3306，这个只是在服务器上或者端口转发时可以访问，不要对外公开</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name=nextcloud_db -e MYSQL_ROOT_PASSWORD=12345678 -d -p 33306:3306 mysql</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>打开docker的mysql，并且创建nextcloud的数据库</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nextcloud_db mysql -u root -p</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>输入密码</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">12345678</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>创建数据库</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">CREATE DATABASE nextcloud;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>将数据库赋予root用户</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GRANT ALL ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>刷新</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="docker安装nextcloud，并与mysql关联"><a href="#docker安装nextcloud，并与mysql关联" class="headerlink" title="docker安装nextcloud，并与mysql关联"></a>docker安装nextcloud，并与mysql关联</h2><ul>
<li><p>docker外部端口为81，主机为db，外部文件夹为<code>/home/data/nextcloud</code>，方便以后转移或者备份文件</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name=nextcloud --link nextcloud_db:db -p 81:80  --restart always -v /home/data/nextcloud:/var/www/html nextcloud</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>初始化</p>
<p>  此时如果使用vscode的ssh插件远程到服务器上，在vscode的远程插件左下角端口转发80，点击会跳转浏览器，即在电脑浏览器打开了 <a href="http://localhost:81/">http://localhost:81/</a> ，此时可以初始化，数据库选择mysql</p>
</li>
<li><p>注意！</p>
<p>  最后一项主机名填写 db，密码12345678</p>
</li>
</ul>
<h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><ul>
<li><p>进入docker命令行</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nextcloud /bin/bash</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>编辑nextcloud配置文件</p>
<p>  如果没有vim，请安装</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install vim</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim config/config.php</span><br></pre></td></tr></tbody></table></figure>

<p>  找到 <code>trusted_domains</code> 这一行，下面应该有一行 <code>0 =&gt; 'ip地址'</code>，在它下面添加域名即可</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1 =&gt; <span class="string">'域名'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ssl</p>
<p>  可以在docker外的nginx配置如下，实现ssl，注意填写自己的文件夹<code>/etc/letsencrypt/live/域名/</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">      listen       315 ssl;</span><br><span class="line">      server_name  icpcs.lzu.edu.cn;</span><br><span class="line"></span><br><span class="line">      ssl_certificate      /etc/letsencrypt/live/icpcs.lzu.edu.cn/fullchain.pem;</span><br><span class="line">      ssl_certificate_key  /etc/letsencrypt/live/icpcs.lzu.edu.cn/privkey.pem;</span><br><span class="line"></span><br><span class="line">      location / {</span><br><span class="line">              add_header Strict-Transport-Security <span class="string">"max-age=15768000;preload;"</span>;</span><br><span class="line">              proxy_pass http://localhost:81;</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      error_page 404 /404.html;</span><br><span class="line">      location = /404.html {</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      error_page 500 502 503 504 /50x.html;</span><br><span class="line">      location = /50x.html {</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>  其中letsencrypt可以使用 <a href="https://certbot.eff.org/">certbot</a></p>
<p>  3个月有效期，定时任务自动刷新</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">certbot certonly --webroot -w /home/data/www -d icpcs.lzu.edu.cn</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https自动更新证书</span></span><br><span class="line">0 3 1 * * certbot renew &amp;&amp; nginx -s reload &amp;&amp; cp -L  /etc/letsencrypt/live/icpcs.lzu.edu.cn/* /home/data/docker/gitlab-ce/config/ssl/ &amp;&amp; cp -L /etc/letsencrypt/live/icpcs.lzu.edu.cn/* /home/data/docker/config/ssl/</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>定期刷新</p>
  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure>

  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># docker中nextcloud后台任务刷新</span></span><br><span class="line">*/5 * * * * docker <span class="built_in">exec</span> --user www-data nextcloud php -f cron.php</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nextcloud</tag>
        <tag>mysql</tag>
        <tag>portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>我是谁</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>一个不务正业的物理生</p>
]]></content>
  </entry>
  <entry>
    <title>归档</title>
    <url>/archives/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
